---

# Check systems are debian (ubuntu) 

- name: Fail if not running on Debian
  fail: msg="These tasks should only be run on Debian/Ubuntu servers"
  when: ansible_os_family != "Debian"

# Disable swap since Kubernetes can't work with swap enabled (in order for the kubelet to work properly)

- name: Disable swap (if configured) (1/2)
  command: swapoff -a
  tags: ['skip_ansible_lint']

- name: Disable swap in fstab (2/2)
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'

# Install NGINX Controller prerequisites
- name:  make sure all the prerequisites are present on the remote
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
    - jq
    - python3-pip
    - gettext
    - bash
    - gzip
    - coreutils
    - grep
    - less
    - sed
    - tar
    - whois
    - python-pexpect  # to support ansible
    - nfs-common  # to support nfs remote volume
  tags: packages

# Install prerequisites for expect module
- name: Install pexpect package
  pip:
    name: 
      - pexpect

# Copy over gcp creds file for gcp_storage_object module
- name: Copy file with owner and permissions
  copy:
    src: /drone/src/gcp/gcp_creds.json
    dest: /tmp/gcp_creds.json
    owner: root
    mode: '400'

# Using gsutil (part of google sdk) command to download the files as other modules fail
# First, authenticate with the service account credentials
- name: init with service account json
  shell: gcloud auth activate-service-account --key-file /tmp/gcp_creds.json

# Download the file to /tmp
- name: init with service account json
  shell: gsutil cp gs://{{ controller_bucket }}/{{ bucket_path }} {{ local_path }}
  register: ctlr_tarball

# - debug:
#     msg: "{{ ctlr_tarball }}"

# Remove gcp creds file
- name: Remove file (delete file)
  file:
    path: /tmp/gcp_creds.json
    state: absent

# Generate a password hash for use by su on controller https://docs.ansible.com/ansible/latest/modules/expect_module.html 
- name: generate password hash # https://askubuntu.com/questions/982804/mkpasswd-m-sha-512-produces-incorrect-login
  expect:
    echo: yes
    command: /bin/bash -c "mkpasswd --method=sha-512 | sed 's/\$/\\$/g'"
    responses:
      (?i)password: "{{ su_password }}"
  register: password_hash

# Supporting su requirement for Controller installer role
- name: set root password to support su for Controller installation with Ubuntu
  user:
    name: root
    password: hostvars['localhost']['password_hash'].stdout_lines[1]

# Troubleshoot tasks below if wanting to deal with the unattended upgrades on boot
# - name: Wait for any possibly running unattended upgrade to finish
#   raw: systemd-run --property="After=apt-daily.service apt-daily-upgrade.service" --wait /bin/true

# - name: update and upgrade packages via apt
#   apt:
#     upgrade: yes
#     update_cache: yes
#   register: apt_status
#   until: apt_status is success
#   delay: 5
#   retries: 10
 
# - name: ensure nginx is at the latest version
#   apt: 
#     name=nginx state=latest

# - name: start nginx
#   service:
#     name: nginx
#     state: started