{
	"info": {
		"_postman_id": "cae18a3c-ef2e-49c0-be5c-3ffcaa3e09b8",
		"name": "Introduction to NGINX Controller v3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1) Take ownership of your Blue Platform",
			"item": [
				{
					"name": "1) Change seeded admin password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Private-Token",
								"value": "iNKcrEshzFZxRrF7TxF-",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"state\": {\n\t    \"password_payload\": {\n\t       \"current_password\": \"{{INITIAL_PASSWORD}}\",\n\t       \"new_password\": \"{{PASSWORD}}\"\n\t    }\n\t}\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/users/admin/lifecycle",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"users",
								"admin",
								"lifecycle"
							]
						}
					},
					"response": []
				},
				{
					"name": "2) Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
								"exec": [
									"pm.test(\"Authenticate\", function () {\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									" \r",
									"    pm.globals.set(\"TOKEN\", jsonData.state.token);\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"admin\",\n\t\t\"password\": \"{{PASSWORD}}\"\n\t}\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "3) License the Platform",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "877223b0-d500-4476-936f-3733d31ab00a",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"cat_id\": \"{{CAT_ID}}\"\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/license",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"license"
							]
						}
					},
					"response": [
						{
							"name": "Lifecycle",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/v1beta1/lifecycle",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"v1beta1",
										"lifecycle"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "grpc-metadata-content-type",
									"value": "application/grpc"
								},
								{
									"key": "date",
									"value": "Fri, 12 Oct 2018 01:00:05 GMT"
								},
								{
									"key": "content-length",
									"value": "458"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "103"
								},
								{
									"key": "server",
									"value": "envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"metadata\": {\n        \"name\": \"lifecycle\",\n        \"namespace\": \"api/platform/v1beta1\",\n        \"kind\": \"f5.ext.platform.lifecycle\",\n        \"uid\": \"d376a412-cdb1-11e8-bbe6-060757e5a46a\",\n        \"create_time\": \"2018-10-12T00:00:27Z\",\n        \"update_time\": null\n    },\n    \"spec\": {\n        \"intent\": \"PROVISION\"\n    },\n    \"status\": {\n        \"phase\": \"PROVISIONED\",\n        \"health\": {\n            \"index\": 0,\n            \"reason\": \"Platform is unhealthy\",\n            \"elements\": [\n                {\n                    \"element_name\": \"analytics\",\n                    \"index\": 0,\n                    \"reason\": \"Platform health is unavailable when Analytics services are not responsive\"\n                }\n            ]\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "4) GET Platform license information",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "877223b0-d500-4476-936f-3733d31ab00a",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/license",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"license"
							]
						}
					},
					"response": [
						{
							"name": "Lifecycle",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/v1beta1/lifecycle",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"v1beta1",
										"lifecycle"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "grpc-metadata-content-type",
									"value": "application/grpc"
								},
								{
									"key": "date",
									"value": "Fri, 12 Oct 2018 01:00:05 GMT"
								},
								{
									"key": "content-length",
									"value": "458"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "103"
								},
								{
									"key": "server",
									"value": "envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"metadata\": {\n        \"name\": \"lifecycle\",\n        \"namespace\": \"api/platform/v1beta1\",\n        \"kind\": \"f5.ext.platform.lifecycle\",\n        \"uid\": \"d376a412-cdb1-11e8-bbe6-060757e5a46a\",\n        \"create_time\": \"2018-10-12T00:00:27Z\",\n        \"update_time\": null\n    },\n    \"spec\": {\n        \"intent\": \"PROVISION\"\n    },\n    \"status\": {\n        \"phase\": \"PROVISIONED\",\n        \"health\": {\n            \"index\": 0,\n            \"reason\": \"Platform is unhealthy\",\n            \"elements\": [\n                {\n                    \"element_name\": \"analytics\",\n                    \"index\": 0,\n                    \"reason\": \"Platform health is unavailable when Analytics services are not responsive\"\n                }\n            ]\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "5) Enable Blue HA",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "445612dd-90d5-4ff5-af4e-4ce59ef52626",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"spec\":{ \r\n  \t\"ha\": \"ENABLE\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/lifecycle",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"lifecycle"
							]
						}
					},
					"response": []
				},
				{
					"name": "6) GET Platform status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "877223b0-d500-4476-936f-3733d31ab00a",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/lifecycle",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"lifecycle"
							]
						}
					},
					"response": [
						{
							"name": "Lifecycle",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/v1beta1/lifecycle",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"v1beta1",
										"lifecycle"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "grpc-metadata-content-type",
									"value": "application/grpc"
								},
								{
									"key": "date",
									"value": "Fri, 12 Oct 2018 01:00:05 GMT"
								},
								{
									"key": "content-length",
									"value": "458"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "103"
								},
								{
									"key": "server",
									"value": "envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"metadata\": {\n        \"name\": \"lifecycle\",\n        \"namespace\": \"api/platform/v1beta1\",\n        \"kind\": \"f5.ext.platform.lifecycle\",\n        \"uid\": \"d376a412-cdb1-11e8-bbe6-060757e5a46a\",\n        \"create_time\": \"2018-10-12T00:00:27Z\",\n        \"update_time\": null\n    },\n    \"spec\": {\n        \"intent\": \"PROVISION\"\n    },\n    \"status\": {\n        \"phase\": \"PROVISIONED\",\n        \"health\": {\n            \"index\": 0,\n            \"reason\": \"Platform is unhealthy\",\n            \"elements\": [\n                {\n                    \"element_name\": \"analytics\",\n                    \"index\": 0,\n                    \"reason\": \"Platform health is unavailable when Analytics services are not responsive\"\n                }\n            ]\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "7) GET Platform node information",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "877223b0-d500-4476-936f-3733d31ab00a",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});",
									"",
									"var response = JSON.parse(responseBody);",
									"var _controllers = response.items.filter(e=> e.spec.node_type_id == 'control');",
									"var _controllerNotReady = _controllers.filter(e=>e.status.phase != 'READY').map(x => x.resource_id);",
									"",
									"pm.test(\"Control Node Count\",function(){",
									"    if (_controllers.length < 3) throw new Error(_controllers.length + \" out of 3 control nodes provisioned\");",
									"});",
									"",
									"pm.test(\"Control Nodes Ready\",e =>{",
									"    if (_controllerNotReady.length > 0) throw new Error(\"At least \" + _controllerNotReady + \" is not ready to recieve traffic\");",
									"});",
									"",
									"//console.log('testing => ',Array.isArray(_controllers.items))",
									"//console.log(_controllers.items.filter(e=> e.spec.node_type_id == 'control'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/nodes",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"nodes"
							]
						}
					},
					"response": [
						{
							"name": "Lifecycle",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/v1beta1/lifecycle",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"v1beta1",
										"lifecycle"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "grpc-metadata-content-type",
									"value": "application/grpc"
								},
								{
									"key": "date",
									"value": "Fri, 12 Oct 2018 01:00:05 GMT"
								},
								{
									"key": "content-length",
									"value": "458"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "103"
								},
								{
									"key": "server",
									"value": "envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"metadata\": {\n        \"name\": \"lifecycle\",\n        \"namespace\": \"api/platform/v1beta1\",\n        \"kind\": \"f5.ext.platform.lifecycle\",\n        \"uid\": \"d376a412-cdb1-11e8-bbe6-060757e5a46a\",\n        \"create_time\": \"2018-10-12T00:00:27Z\",\n        \"update_time\": null\n    },\n    \"spec\": {\n        \"intent\": \"PROVISION\"\n    },\n    \"status\": {\n        \"phase\": \"PROVISIONED\",\n        \"health\": {\n            \"index\": 0,\n            \"reason\": \"Platform is unhealthy\",\n            \"elements\": [\n                {\n                    \"element_name\": \"analytics\",\n                    \"index\": 0,\n                    \"reason\": \"Platform health is unavailable when Analytics services are not responsive\"\n                }\n            ]\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "8) Logout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
								"exec": [
									"pm.test(\"Logout\", function () {",
									"    ",
									"    pm.globals.unset(\"TOKEN\");",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"state\": {\n        \"token\": \"{{TOKEN}}\"\n    }\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/logout",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "ZZZ) GET Zones",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "877223b0-d500-4476-936f-3733d31ab00a",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});",
									"",
									"var response = JSON.parse(responseBody);",
									"var _controllers = response.items.filter(e=> e.spec.node_type_id == 'control');",
									"var _controllerNotReady = _controllers.filter(e=>e.status.phase != 'READY').map(x => x.resource_id);",
									"",
									"pm.test(\"Control Node Count\",function(){",
									"    if (_controllers.length < 3) throw new Error(_controllers.length + \" out of 3 control nodes provisioned\");",
									"});",
									"",
									"pm.test(\"Control Nodes Ready\",e =>{",
									"    if (_controllerNotReady.length > 0) throw new Error(\"At least \" + _controllerNotReady + \" is not ready to recieve traffic\");",
									"});",
									"",
									"//console.log('testing => ',Array.isArray(_controllers.items))",
									"//console.log(_controllers.items.filter(e=> e.spec.node_type_id == 'control'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/zones",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"zones"
							]
						}
					},
					"response": [
						{
							"name": "Lifecycle",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/v1beta1/lifecycle",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"v1beta1",
										"lifecycle"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "grpc-metadata-content-type",
									"value": "application/grpc"
								},
								{
									"key": "date",
									"value": "Fri, 12 Oct 2018 01:00:05 GMT"
								},
								{
									"key": "content-length",
									"value": "458"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "103"
								},
								{
									"key": "server",
									"value": "envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"metadata\": {\n        \"name\": \"lifecycle\",\n        \"namespace\": \"api/platform/v1beta1\",\n        \"kind\": \"f5.ext.platform.lifecycle\",\n        \"uid\": \"d376a412-cdb1-11e8-bbe6-060757e5a46a\",\n        \"create_time\": \"2018-10-12T00:00:27Z\",\n        \"update_time\": null\n    },\n    \"spec\": {\n        \"intent\": \"PROVISION\"\n    },\n    \"status\": {\n        \"phase\": \"PROVISIONED\",\n        \"health\": {\n            \"index\": 0,\n            \"reason\": \"Platform is unhealthy\",\n            \"elements\": [\n                {\n                    \"element_name\": \"analytics\",\n                    \"index\": 0,\n                    \"reason\": \"Platform health is unavailable when Analytics services are not responsive\"\n                }\n            ]\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "ZZZ) GET control Zone",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "877223b0-d500-4476-936f-3733d31ab00a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/zones/control",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"zones",
								"control"
							]
						}
					},
					"response": [
						{
							"name": "Lifecycle",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/v1beta1/lifecycle",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"v1beta1",
										"lifecycle"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "grpc-metadata-content-type",
									"value": "application/grpc"
								},
								{
									"key": "date",
									"value": "Fri, 12 Oct 2018 01:00:05 GMT"
								},
								{
									"key": "content-length",
									"value": "458"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "103"
								},
								{
									"key": "server",
									"value": "envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"metadata\": {\n        \"name\": \"lifecycle\",\n        \"namespace\": \"api/platform/v1beta1\",\n        \"kind\": \"f5.ext.platform.lifecycle\",\n        \"uid\": \"d376a412-cdb1-11e8-bbe6-060757e5a46a\",\n        \"create_time\": \"2018-10-12T00:00:27Z\",\n        \"update_time\": null\n    },\n    \"spec\": {\n        \"intent\": \"PROVISION\"\n    },\n    \"status\": {\n        \"phase\": \"PROVISIONED\",\n        \"health\": {\n            \"index\": 0,\n            \"reason\": \"Platform is unhealthy\",\n            \"elements\": [\n                {\n                    \"element_name\": \"analytics\",\n                    \"index\": 0,\n                    \"reason\": \"Platform health is unavailable when Analytics services are not responsive\"\n                }\n            ]\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "ZZZ) GET control Zone subntes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "877223b0-d500-4476-936f-3733d31ab00a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/zones/control/subnets",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"zones",
								"control",
								"subnets"
							]
						}
					},
					"response": [
						{
							"name": "Lifecycle",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/v1beta1/lifecycle",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"v1beta1",
										"lifecycle"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "grpc-metadata-content-type",
									"value": "application/grpc"
								},
								{
									"key": "date",
									"value": "Fri, 12 Oct 2018 01:00:05 GMT"
								},
								{
									"key": "content-length",
									"value": "458"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "103"
								},
								{
									"key": "server",
									"value": "envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"metadata\": {\n        \"name\": \"lifecycle\",\n        \"namespace\": \"api/platform/v1beta1\",\n        \"kind\": \"f5.ext.platform.lifecycle\",\n        \"uid\": \"d376a412-cdb1-11e8-bbe6-060757e5a46a\",\n        \"create_time\": \"2018-10-12T00:00:27Z\",\n        \"update_time\": null\n    },\n    \"spec\": {\n        \"intent\": \"PROVISION\"\n    },\n    \"status\": {\n        \"phase\": \"PROVISIONED\",\n        \"health\": {\n            \"index\": 0,\n            \"reason\": \"Platform is unhealthy\",\n            \"elements\": [\n                {\n                    \"element_name\": \"analytics\",\n                    \"index\": 0,\n                    \"reason\": \"Platform health is unavailable when Analytics services are not responsive\"\n                }\n            ]\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "ZZZ) GET control Zone subntes detailed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "877223b0-d500-4476-936f-3733d31ab00a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/zones/control/subnets/default",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"zones",
								"control",
								"subnets",
								"default"
							]
						}
					},
					"response": [
						{
							"name": "Lifecycle",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/v1beta1/lifecycle",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"v1beta1",
										"lifecycle"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "grpc-metadata-content-type",
									"value": "application/grpc"
								},
								{
									"key": "date",
									"value": "Fri, 12 Oct 2018 01:00:05 GMT"
								},
								{
									"key": "content-length",
									"value": "458"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "103"
								},
								{
									"key": "server",
									"value": "envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"metadata\": {\n        \"name\": \"lifecycle\",\n        \"namespace\": \"api/platform/v1beta1\",\n        \"kind\": \"f5.ext.platform.lifecycle\",\n        \"uid\": \"d376a412-cdb1-11e8-bbe6-060757e5a46a\",\n        \"create_time\": \"2018-10-12T00:00:27Z\",\n        \"update_time\": null\n    },\n    \"spec\": {\n        \"intent\": \"PROVISION\"\n    },\n    \"status\": {\n        \"phase\": \"PROVISIONED\",\n        \"health\": {\n            \"index\": 0,\n            \"reason\": \"Platform is unhealthy\",\n            \"elements\": [\n                {\n                    \"element_name\": \"analytics\",\n                    \"index\": 0,\n                    \"reason\": \"Platform health is unavailable when Analytics services are not responsive\"\n                }\n            ]\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "ZZZ) GET platform configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "877223b0-d500-4476-936f-3733d31ab00a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/configuration",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"configuration"
							]
						}
					},
					"response": [
						{
							"name": "Lifecycle",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/v1beta1/lifecycle",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"v1beta1",
										"lifecycle"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "grpc-metadata-content-type",
									"value": "application/grpc"
								},
								{
									"key": "date",
									"value": "Fri, 12 Oct 2018 01:00:05 GMT"
								},
								{
									"key": "content-length",
									"value": "458"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "103"
								},
								{
									"key": "server",
									"value": "envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"metadata\": {\n        \"name\": \"lifecycle\",\n        \"namespace\": \"api/platform/v1beta1\",\n        \"kind\": \"f5.ext.platform.lifecycle\",\n        \"uid\": \"d376a412-cdb1-11e8-bbe6-060757e5a46a\",\n        \"create_time\": \"2018-10-12T00:00:27Z\",\n        \"update_time\": null\n    },\n    \"spec\": {\n        \"intent\": \"PROVISION\"\n    },\n    \"status\": {\n        \"phase\": \"PROVISIONED\",\n        \"health\": {\n            \"index\": 0,\n            \"reason\": \"Platform is unhealthy\",\n            \"elements\": [\n                {\n                    \"element_name\": \"analytics\",\n                    \"index\": 0,\n                    \"reason\": \"Platform health is unavailable when Analytics services are not responsive\"\n                }\n            ]\n        }\n    }\n}"
						}
					]
				}
			]
		},
		{
			"name": "2) HTTP application definition",
			"item": [
				{
					"name": "1) Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
								"exec": [
									"pm.test(\"Authenticate\", function () {\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									" \r",
									"    pm.globals.set(\"TOKEN\", jsonData.state.token);\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"admin\",\n\t\t\"password\": \"{{PASSWORD}}\"\n\t}\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2) Deploy HTTP example-application and Service",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ed7488ae-5417-4e06-9aab-5aab35dfb9e3",
								"exec": [
									"requestBody = JSON.parse(request.data);\r",
									"Object.keys(requestBody.spec.services).forEach( function(path){\r",
									"    Object.keys(requestBody.spec.services[path].egress.workloads).forEach(function(workload){\r",
									"        let w = workload.split('//')[1].split(':')[0];\r",
									"        if (w.startsWith('{{') && w.endsWith('}}')) {\r",
									"            let wl = w.substring(2,w.length-2);\r",
									"            if (/[<>/\\\\${}]/g.test(pm.variables.get(wl)) || pm.variables.get(wl) === undefined || !(pm.variables.get(wl))) {\r",
									"                throw new Error(\"Egress Workload variable \" + wl + \" contains an invalid character or  is undefined: \" +  pm.variables.get(wl));\r",
									"            }\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "260e8757-b10e-4675-a600-a44e5cc134a0",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"spec\": {\n        \"display_name\": \"App One\",\n        \"description\": \"Olivia's first example app\",\n        \"certs\": {},\n        \"services\": {\n            \"http-path-80\": {\n                \"ingress\": {\n                    \"uris\": {\n                        \"http://example.com:80\": {}\n                    }\n                },\n                \"egress\": {\n                    \"workloads\": {\n                        \"http://{{WORKLOAD_01}}\": {},\n                        \"http://{{WORKLOAD_02}}:80\": {}\n                    }\n                }\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps/example-application",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps",
								"example-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "2) Deploy HTTP example-application and Service (Ansible Like)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ed7488ae-5417-4e06-9aab-5aab35dfb9e3",
								"exec": [
									"requestBody = JSON.parse(request.data);\r",
									"Object.keys(requestBody.spec.services).forEach( function(path){\r",
									"    Object.keys(requestBody.spec.services[path].egress.workloads).forEach(function(workload){\r",
									"        let w = workload.split('//')[1].split(':')[0];\r",
									"        if (w.startsWith('{{') && w.endsWith('}}')) {\r",
									"            let wl = w.substring(2,w.length-2);\r",
									"            if (/[<>/\\\\${}]/g.test(pm.variables.get(wl)) || pm.variables.get(wl) === undefined || !(pm.variables.get(wl))) {\r",
									"                throw new Error(\"Egress Workload variable \" + wl + \" contains an invalid character or  is undefined: \" +  pm.variables.get(wl));\r",
									"            }\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "260e8757-b10e-4675-a600-a44e5cc134a0",
								"exec": [
									"",
									"var timeout = setTimeout(() => {}, 2147483647);",
									"var intervalCheck = 10000; // 10 Seconds",
									"var maxChecks = 60;",
									"var provisoined = false;",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});",
									"",
									"const _request = {",
									"    url: 'https://'+request.headers.host+'/'+jsonData.metadata.namespace+'/'+jsonData.metadata.name,",
									"    method: 'GET',",
									"    header: 'x-f5-authn-token:'+request.headers[\"x-f5-authn-token\"]",
									"};",
									"",
									"function checkStatus() {",
									"    return new Promise((resolve,reject) => {",
									"        setTimeout(() => {",
									"            pm.sendRequest(_request, function (err, res) {",
									"                resolve(res.json());",
									"            });",
									"        }, 10000);",
									"    });",
									"}",
									"",
									"async function start() {",
									"    for (i = 0; i < maxChecks; i++){",
									"        let _response = await checkStatus();",
									"        console.log(_response.status.phase);",
									"        if (_response.status.phase == 'PROVISIONED') {",
									"            provisoined = true;",
									"            clearTimeout(timeout);",
									"            break;",
									"        }",
									"    }",
									"",
									"    if (!provisoined){",
									"        clearTimeout(timeout);",
									"    }",
									"    pm.test(\"PROVISIONED\",() => {",
									"        if (!provisoined){",
									"            throw new Error(\"Application failed to provision before script timed out\")",
									"        }",
									"    })",
									"}",
									"",
									"if (jsonData.status.phase != 'PROVISIONED') {",
									"    console.log('starting checks');",
									"    start();",
									"} else {",
									"    clearTimeout(timeout);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"spec\": {\n        \"display_name\": \"App One\",\n        \"description\": \"Olivia's first example app\",\n        \"certs\": {},\n        \"services\": {\n            \"http-path-80\": {\n                \"ingress\": {\n                    \"uris\": {\n                        \"http://example.com:80\": {}\n                    }\n                },\n                \"egress\": {\n                    \"workloads\": {\n                        \"http://{{WORKLOAD_01}}\": {},\n                        \"http://{{WORKLOAD_02}}:80\": {}\n                    }\n                }\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps/example-application",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps",
								"example-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "3) GET example-application deployment status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "445612dd-90d5-4ff5-af4e-4ce59ef52626",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});",
									"console.log('happy days');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps/example-application",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps",
								"example-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "4) Add new Services on port 8080",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ed7488ae-5417-4e06-9aab-5aab35dfb9e3",
								"exec": [
									"requestBody = JSON.parse(request.data);\r",
									"Object.keys(requestBody.spec.egress.workloads).forEach(function(workload){\r",
									"    let w = workload.split('//')[1].split(':')[0];\r",
									"    if (w.startsWith('{{') && w.endsWith('}}')) {\r",
									"        let wl = w.substring(2,w.length-2);\r",
									"        if (/[<>/\\\\${}]/g.test(pm.variables.get(wl)) || pm.variables.get(wl) === undefined || !(pm.variables.get(wl))) {\r",
									"            throw new Error(\"Egress Workload variable \" + wl + \" contains an invalid character or  is undefined: \" +  pm.variables.get(wl));\r",
									"        }\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "260e8757-b10e-4675-a600-a44e5cc134a0",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"spec\": {\n        \"ingress\": {\n            \"uris\": {\n                \"http://example.com:8080\": {}\n            }\n        },\n        \"egress\": {\n            \"workloads\": {\n                \"http://{{WORKLOAD_01}}\": {},\n                \"http://{{WORKLOAD_02}}:80\": {}\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps/example-application/services/http-path-8080",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps",
								"example-application",
								"services",
								"http-path-8080"
							]
						}
					},
					"response": []
				},
				{
					"name": "5) GET status of new Service on port 8080",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "445612dd-90d5-4ff5-af4e-4ce59ef52626",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps/example-application/services/http-path-8080",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps",
								"example-application",
								"services",
								"http-path-8080"
							]
						}
					},
					"response": []
				},
				{
					"name": "6) Logout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
								"exec": [
									"pm.test(\"Logout\", function () {",
									"    ",
									"    pm.globals.unset(\"TOKEN\");",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"state\": {\n        \"token\": \"{{TOKEN}}\"\n    }\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/logout",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3) HTTP HTTPS application definiton",
			"item": [
				{
					"name": "1) Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
								"exec": [
									"pm.test(\"Authenticate\", function () {\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									" \r",
									"    pm.globals.set(\"TOKEN\", jsonData.state.token);\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"admin\",\n\t\t\"password\": \"{{PASSWORD}}\"\n\t}\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2) GET certificates managed by Blue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15f5eaa0-6478-40f2-ae48-74d9652047f8",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/certs",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"certs"
							]
						}
					},
					"response": []
				},
				{
					"name": "3) Add HTTPS services to example-application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bcfa36a-d6ee-4fd4-9423-a4db585f353d",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "29aa0a9f-d292-44b8-89b6-1b661b492505",
								"exec": [
									"requestBody = JSON.parse(request.data);\r",
									"Object.keys(requestBody.spec.services).forEach( function(path){\r",
									"    Object.keys(requestBody.spec.services[path].egress.workloads).forEach(function(workload){\r",
									"        let w = workload.split('//')[1].split(':')[0];\r",
									"        if (w.startsWith('{{') && w.endsWith('}}')) {\r",
									"            let wl = w.substring(2,w.length-2);\r",
									"            if (/[<>/\\\\${}]/g.test(pm.variables.get(wl)) || pm.variables.get(wl) === undefined || !(pm.variables.get(wl))) {\r",
									"                throw new Error(\"Egress Workload variable \" + wl + \" contains an invalid character or  is undefined: \" +  pm.variables.get(wl));\r",
									"            }\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"spec\": {\r\n        \"display_name\": \"App One\",\r\n        \"description\": \"Olivia's first example app\",\r\n        \"certs\": {\r\n            \"cert-1\": {\r\n    \"pem\": {\r\n      \"password\": \"\",\r\n      \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCfeMhtEfhMWrPa\\nZAo64fNYcNg9uJjA+KzNqK9vQ5N/yFjxXEtL4/qVVNLd5aX1w8evk0cYNS3fFT24\\ne3sSilwOD3fWSg3ilDlELaVzgUpU233ONb6ksVvv6Pw2t19UZTVXT1qg+zdksO47\\n9hIP4AiaEKIl3gO3u4m5GOzQtMcGUumOt9IdZF9CK3vrVD7lD5+aF/7pZ792drED\\ncfJFgGX0j97gx1h+fRU5PJthcIx1QIhcYmdeFFycEgVoIaL7hgk07ij5hee6gH49\\n1R/zZp4PvJ119eikzN5Mc9kgtvAp5HBXdGtn1A2hpifMz50xvOeekYdEl2Z24Vyw\\n850mqbR/AgMBAAECggEAdNcY+hjtdHwMRFmByUydb9IWDXq/qLtKWNBb4UiAvGH9\\nELIPlQXvJhRk/yFwLBYKq1BcCZeFCWrVsuH99UKcWczpf374l2cEYjiTfYJgBLZg\\ngYKNMLul4awxhqFp3jrdDyBcBZCqMEMV+aa76xe5FbBULSxySt7D9HMXp36cR7u1\\na9qHOpySa4IciKghW3NIBUEW85iYPIf/VnwdaLvvQrwMkzhvYyfS2q5HGOAs1Ngi\\nvYxv4spWFhh/xX9O0K0c87/hw5eBNgBntduYZC7zGLj3HeQH5NJZawJ1Npwf0xaP\\nofb8qTkKWlpCuiCXTp3VCkBmFvBZDZpSZaXBHKQAaQKBgQDT5l3UkgMs85f11SfW\\nv0hKvx/sDWMtjtZMLy+tQob5P8mpclQUkTYZKFNeJjg6jmzlDiclV5BKOOfoGlOY\\nttUe782mEhwkd125CDWCZa+xpVxMAQNH0P/aNn4BxbdJjMyUlOZOia07RCN4XVtz\\nNxaqLPvpgC1EJMWziiHWS8L7YwKBgQDAqSVsAuE3CnQcVVODTYglYD/OonZE7GLi\\nu+Wm+6m/B9+zuKXeQMhXaDJh6S2jJGI9g5URsdc4wWZnNVwYRM8KLfEBY9TmMPEP\\nvd3wTzev466qJWxTL7E84/JacHjOPF45bkBCeYRSUV9zCIoIAC1mOTUYDuHC1bZ4\\nTL2/cTiDNQKBgB01ojWNMxbdNVNT4Lv/fi2fjvzxE3zSNcQmtQHDK+vr2Rache6X\\n3cc2Adf2mMWpoGUqwEarfV5d3cnm5yMkANjU4ZpE4NA+DBNXiFjDP6bTTpfDg/pA\\nWyRvYotH/+4JlKHerKii3dhPmjwbUmHddChdLxSO8K52CzKmled+ZhBVAoGBAL6T\\nkwzxHE8R7CFK1j2AKDiwqO2CD3PGUVrvexBeyV7KLyLceFcNxh+QVqY7voUurG8l\\nBgRm4vqldOKLCfqHtjXflBNH6YV6zDpCGpRoCDHZCyILusfe2XfeFBIaR6XaWWp+\\nANrA0X+MNtrXi5K2ejIwTLDrp67PMJx3bQs+uCQxAoGAAVIHW3r9R7HNHhbjQjV+\\n4ZEwXycmCtYgRdD4APrOp9T62QT1epi867OEm68ySkTpJZCFYELwKdK16a9EMU5M\\nGmY9zKXVePfPSS+x6krfN4Rz2zlcY32vdME2ZNPCMUOgjXPCxSOhyJ8cFHQobted\\n8agAnCJ36UwdqV5mzwPtVkc=\\n-----END PRIVATE KEY-----\\n\",\r\n      \"public_cert\": \"-----BEGIN CERTIFICATE-----\\nMIIDjDCCAnQCCQC/hdihUFWIWTANBgkqhkiG9w0BAQsFADCBhzELMAkGA1UEBhMC\\nVVMxEzARBgNVBAgMCldhc2hpbmd0b24xEDAOBgNVBAcMB1NlYXR0bGUxFDASBgNV\\nBAoMC0hlbGxvSGVhbHRoMRcwFQYDVQQDDA5IZWxsb0hlYWx0aC5pbzEiMCAGCSqG\\nSIb3DQEJARYTcm9vdEBIZWxsb0hlYWx0aC5pbzAeFw0xODA4MDQwMTAzMjhaFw0x\\nOTA4MDQwMTAzMjhaMIGHMQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3Rv\\nbjEQMA4GA1UEBwwHU2VhdHRsZTEUMBIGA1UECgwLSGVsbG9IZWFsdGgxFzAVBgNV\\nBAMMDkhlbGxvSGVhbHRoLmlvMSIwIAYJKoZIhvcNAQkBFhNyb290QEhlbGxvSGVh\\nbHRoLmlvMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn3jIbRH4TFqz\\n2mQKOuHzWHDYPbiYwPiszaivb0OTf8hY8VxLS+P6lVTS3eWl9cPHr5NHGDUt3xU9\\nuHt7EopcDg931koN4pQ5RC2lc4FKVNt9zjW+pLFb7+j8NrdfVGU1V09aoPs3ZLDu\\nO/YSD+AImhCiJd4Dt7uJuRjs0LTHBlLpjrfSHWRfQit761Q+5Q+fmhf+6We/dnax\\nA3HyRYBl9I/e4MdYfn0VOTybYXCMdUCIXGJnXhRcnBIFaCGi+4YJNO4o+YXnuoB+\\nPdUf82aeD7yddfXopMzeTHPZILbwKeRwV3RrZ9QNoaYnzM+dMbznnpGHRJdmduFc\\nsPOdJqm0fwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQCHalSX6X8SUkL0QliU/hOW\\noQulgTULr3HcXR55gDErhQPQ/66QIV5uJjUpdRiyYmRikS/h0Zcs3ZzFkZlD31cF\\nqXgYqpvBxCtkXfRwedu+HLzVq7O5pdTRTNtoynJbdo1RXNsaP1sgK5qr806RsWLk\\njW4mmzDPXl6Z1wf2fwa05QHJiQSANzDhOrPSmW5YUZojV5dMDGN8JmlnH3ESdDSc\\n5fPR2f+IoUTet4CmHqdRPb7xyiEbk+krYuYLTENBh1Bn5YEgprV+DgAtQ6cBMOTX\\n1UlfOILhhXpjVar3WOLU6hEOosB2I+oYQxeHNLMrAhtMfmRkJWbGHYeOd2F1Ac1T\\n-----END CERTIFICATE-----\\n\",\r\n      \"ca_certs\": []\r\n    }\r\n  }\r\n        },\r\n        \"services\": {\r\n            \"http-path-80\": {\r\n                \"ingress\": {\r\n                    \"uris\": {\r\n                        \"http://example.com:80\": {}\r\n                    }\r\n                },\r\n                \"egress\": {\r\n                    \"workloads\": {\r\n                        \"http://{{WORKLOAD_01}}\": {},\r\n                        \"http://{{WORKLOAD_02}}:80\": {}\r\n                    }\r\n                }\r\n            },\r\n            \"http-path-8080\": {\r\n                \"ingress\": {\r\n                    \"uris\": {\r\n                        \"http://example.com:8080\": {}\r\n                    }\r\n                },\r\n                \"egress\": {\r\n                    \"workloads\": {\r\n                        \"http://{{WORKLOAD_01}}\": {},\r\n                        \"http://{{WORKLOAD_02}}:80\": {}\r\n                    }\r\n                }\r\n            },\r\n            \"https-path-443\": {\r\n                \"ingress\": {\r\n                    \"uris\": {\r\n                        \"https://example.com\": {\r\n                            \"tls\": {\r\n                                \"cert_id\": \"cert-1\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"egress\": {\r\n                    \"load_balancing_method\": \"ROUNDROBIN\",\r\n                    \"tls\": {\r\n                        \"authentication\": \"NONE\"\r\n                    },\r\n                    \"workloads\": {\r\n                        \"https://{{WORKLOAD_01}}\": {},\r\n                        \"https://{{WORKLOAD_02}}:443\": {}\r\n                    }\r\n                }\r\n            },\r\n            \"https-path-8443\": {\r\n                \"ingress\": {\r\n                    \"uris\": {\r\n                        \"https://example.com:8443\": {\r\n                            \"tls\": {\r\n                                \"cert_id\": \"cert-1\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"egress\": {\r\n                    \"load_balancing_method\": \"ROUNDROBIN\",\r\n                    \"tls\": {\r\n                        \"authentication\": \"NONE\"\r\n                    },\r\n                    \"workloads\": {\r\n                        \"https://{{WORKLOAD_01}}:8443\": {},\r\n                        \"https://{{WORKLOAD_02}}:8443\": {}\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps/example-application",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps",
								"example-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "4) GET example-application deployment status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3f65e29-415f-4266-a053-f4ae347b9c29",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps/example-application",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps",
								"example-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "5a) Add new certificate (PEM)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bcfa36a-d6ee-4fd4-9423-a4db585f353d",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "29aa0a9f-d292-44b8-89b6-1b661b492505",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"spec\": {\r\n    \"pem\": {\r\n      \"password\": \"\",\r\n      \"private_key\": \"-----BEGIN PRIVATE KEY-----\\r\\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCutSIjUKCL7ISD\\r\\nrv2/BLwnb60h3BMaxId3CpthpEjyKlHarhHZXVXu/Rt6/yuzO+IGZaSzVhe7Prb9\\r\\nc4O6q6I/o17Sdmo68PkZ/5wDUjXR+4kXlxIvzAKX2LPpFlDTEy2VS7b/z7iyUmg0\\r\\npW73a4Cd+FKXanrzAf4Bra5ODmj1KHojxS4nW/nP6UUSfbRpXvC5RGIM0lBwO/CG\\r\\nkiBdpIvks5dE+MISIIYppZkEKK7zicj7jYfcKuRllahz4THKIPsl/N2exnfyCXNc\\r\\nzR+LnFdewUercGRx9hy0duXBksr26KfZkic7MTK5hkvTFbppFcfnnRYGo/zYWzD7\\r\\nERkRGcILAgMBAAECggEBAKO4y00c+dcmxuhAzTp9TXYHic/5VU34bpp4LjTKqDGI\\r\\nxzyPc9qnRSi5uU8CYgmNTLuB9V66h3LJyuKppgEBZwMMLog8wECMImTizWmvWRB3\\r\\nEHoy8LAqFyQFyFPevc+QYV9PnScNmqBB6bWsctkavWVMmNmcx6uDam5YPMiZaHKU\\r\\n97zXTeRSRUu5gQPhdRgVU6RvGKOtPaou/qb8LQBN1wUO6qunogiQ0+GkElhcAnwI\\r\\nvzkvdeC1jWYxLPQ0DLq0zj6x3ENjfmmtA+aoPOjPMEQjxzHQuximwx6wzttUWIzX\\r\\nNGgzOUGzHI7BdNmSsf3LShC/Hbw521V5Xiuc68/6AoECgYEA1V7OSIWkZwudqKny\\r\\nK9yog8utZlr4qy/EfkBRMiqePTcVnm9gGK15zC91AK7IjVRozeZPWMJyXjt/j1yI\\r\\nXSumChVY9QSafP2XmoOVrN/22R9so1bSBC5TJ/q6hawX2025ZaVYdfhbF0TaAor1\\r\\nl0Ue9MZYbIiwANWUX0+iIYOX7fMCgYEA0ZzaTsp/vqiwh9g2Mi0ZNxmHY6g4z3iA\\r\\nnPdYKADTlyC0NxTPueYXBLrD5xRBxjgTOn/sY6dUF70u3Hp7RgB6kiWMSXwgs6OI\\r\\nO4nVwvbTTntFQV5bKaMZdATqXsQileM1UovT6cvFipdlE6XuRQSyVPa/JksiiatB\\r\\nlcrMrDPyqYkCgYEAw7LBxrh0kmKQBttgl6Q6Fy+facq0WuZj9VvuXPHD0ueL95W1\\r\\ncMzjckhwquCkZyPtQDQlwIYPuagelhHLrJDVKFhuD8RaIZvCCeD4TefZE0mELcf6\\r\\ntgT7FiccHnA6LVV7XuQpX4IbohrvTfe/yy+FdgHZpio0K3+5JzX1wYFdvssCgYAK\\r\\n2VNzQIfcFl8MqOQlNLBZabjYL5zBIDuH5EVrzJ8m80pgj3Mw6/fFBuWc0C+XUs+r\\r\\n93MEtWRk1iXWw4Ad32h4p/ja1NHcelpSuo+Vx7CoHzk2aOvO++IVXyvCO+SOXXQl\\r\\nEZemQiW3Rp60paHvcI7KVvsNwFXJSlParORrBUVKAQKBgHRWX6clsBBVNfba+N2L\\r\\nMGwJt4xv305m7VkJvF1+hZtKcwZwWt9ido172tOUzLsiwvsd+mK5ml9aV8h2Bi4/\\r\\nziHcHaEpWmMBusBWT0qICvm0DrbtkmuQ6GFjlFrwO2q5dQf9DZqlrkddy/sWyQ2u\\r\\n3/Xe70T1E3OpXUkr00lUBSjR\\r\\n-----END PRIVATE KEY-----\",\r\n      \"public_cert\": \"-----BEGIN CERTIFICATE-----\\r\\nMIIGDTCCBPWgAwIBAgISAxQ4kOL20USa6gSDhuDu0OYJMA0GCSqGSIb3DQEBCwUA\\r\\nMEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD\\r\\nExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xODA4MDMyMzQzNDZaFw0x\\r\\nODExMDEyMzQzNDZaMBwxGjAYBgNVBAMTEWFjbWVmaW5hbmNpYWwubmV0MIIBIjAN\\r\\nBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArrUiI1Cgi+yEg679vwS8J2+tIdwT\\r\\nGsSHdwqbYaRI8ipR2q4R2V1V7v0bev8rszviBmWks1YXuz62/XODuquiP6Ne0nZq\\r\\nOvD5Gf+cA1I10fuJF5cSL8wCl9iz6RZQ0xMtlUu2/8+4slJoNKVu92uAnfhSl2p6\\r\\n8wH+Aa2uTg5o9Sh6I8UuJ1v5z+lFEn20aV7wuURiDNJQcDvwhpIgXaSL5LOXRPjC\\r\\nEiCGKaWZBCiu84nI+42H3CrkZZWoc+ExyiD7JfzdnsZ38glzXM0fi5xXXsFHq3Bk\\r\\ncfYctHblwZLK9uin2ZInOzEyuYZL0xW6aRXH550WBqP82Fsw+xEZERnCCwIDAQAB\\r\\no4IDGTCCAxUwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggr\\r\\nBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB0GA1UdDgQWBBQ10mczKAUNobKo8IzdH0Ne\\r\\nCnVA8jAfBgNVHSMEGDAWgBSoSmpjBH3duubRObemRWXv86jsoTBvBggrBgEFBQcB\\r\\nAQRjMGEwLgYIKwYBBQUHMAGGImh0dHA6Ly9vY3NwLmludC14My5sZXRzZW5jcnlw\\r\\ndC5vcmcwLwYIKwYBBQUHMAKGI2h0dHA6Ly9jZXJ0LmludC14My5sZXRzZW5jcnlw\\r\\ndC5vcmcvMBwGA1UdEQQVMBOCEWFjbWVmaW5hbmNpYWwubmV0MIH+BgNVHSAEgfYw\\r\\ngfMwCAYGZ4EMAQIBMIHmBgsrBgEEAYLfEwEBATCB1jAmBggrBgEFBQcCARYaaHR0\\r\\ncDovL2Nwcy5sZXRzZW5jcnlwdC5vcmcwgasGCCsGAQUFBwICMIGeDIGbVGhpcyBD\\r\\nZXJ0aWZpY2F0ZSBtYXkgb25seSBiZSByZWxpZWQgdXBvbiBieSBSZWx5aW5nIFBh\\r\\ncnRpZXMgYW5kIG9ubHkgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBDZXJ0aWZpY2F0\\r\\nZSBQb2xpY3kgZm91bmQgYXQgaHR0cHM6Ly9sZXRzZW5jcnlwdC5vcmcvcmVwb3Np\\r\\ndG9yeS8wggEEBgorBgEEAdZ5AgQCBIH1BIHyAPAAdgDbdK/uyynssf7KPnFtLOW5\\r\\nqrs294Rxg8ddnU83th+/ZAAAAWUCY+eJAAAEAwBHMEUCIQDPKjV+cyuMYZjof+Og\\r\\nrA9iOJ98xW31SjuPp+cm+nelmgIgRcPVPLjhGNZ8A2nYHusNhJT8GsLzCZuqz9qh\\r\\nF46Q2bgAdgApPFGWVMg5ZbqqUPxYB9S3b79Yeily3KTDDPTlRUf0eAAAAWUCY+mK\\r\\nAAAEAwBHMEUCIADD07Kn2qeM1fA/T052BSki48GSRI6PjRoQZ9rDHz/qAiEA3tpP\\r\\nNxxhTCuayuYQnfeV8kxmi7ibhf24BoIIkoD9FWkwDQYJKoZIhvcNAQELBQADggEB\\r\\nAH+UgOBJQfe0JmOdC/qhzRsz61nerx0pVKVAhqfTfxjYA2BI+auywCOnIWO+jd9Z\\r\\nbkCibLIhSDA9lRrutx5aDirWwmM1GCCOBOo7xKXueBDkJpkZ0tEoSOo4iC6/u+M+\\r\\nqp33MjAax+nBdXLmLiIjDZNee80F+nKs4HB3Pfoj3bxc11IJ2hJI5sPgtqWMddPq\\r\\n/YMiAZITT6TdC9ZvPweGLINRCU19Q31F9sfIzz3PXDnZ3ysJwuiKszmyFQqlWkFQ\\r\\nE/t4jXssUfkwjA0d0yGx60SObNeNg8O2n0V1VfcSXpvmT6cM77e+hSdQiUI9PhsP\\r\\nqOhGEGSYscj3b5eTg1UHb8E=\\r\\n-----END CERTIFICATE-----\\r\\n\",\r\n      \"ca_certs\": [\r\n        \"-----BEGIN CERTIFICATE-----\\r\\nMIIEkjCCA3qgAwIBAgIQCgFBQgAAAVOFc2oLheynCDANBgkqhkiG9w0BAQsFADA/\\r\\nMSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT\\r\\nDkRTVCBSb290IENBIFgzMB4XDTE2MDMxNzE2NDA0NloXDTIxMDMxNzE2NDA0Nlow\\r\\nSjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUxldCdzIEVuY3J5cHQxIzAhBgNVBAMT\\r\\nGkxldCdzIEVuY3J5cHQgQXV0aG9yaXR5IFgzMIIBIjANBgkqhkiG9w0BAQEFAAOC\\r\\nAQ8AMIIBCgKCAQEAnNMM8FrlLke3cl03g7NoYzDq1zUmGSXhvb418XCSL7e4S0EF\\r\\nq6meNQhY7LEqxGiHC6PjdeTm86dicbp5gWAf15Gan/PQeGdxyGkOlZHP/uaZ6WA8\\r\\nSMx+yk13EiSdRxta67nsHjcAHJyse6cF6s5K671B5TaYucv9bTyWaN8jKkKQDIZ0\\r\\nZ8h/pZq4UmEUEz9l6YKHy9v6Dlb2honzhT+Xhq+w3Brvaw2VFn3EK6BlspkENnWA\\r\\na6xK8xuQSXgvopZPKiAlKQTGdMDQMc2PMTiVFrqoM7hD8bEfwzB/onkxEz0tNvjj\\r\\n/PIzark5McWvxI0NHWQWM6r6hCm21AvA2H3DkwIDAQABo4IBfTCCAXkwEgYDVR0T\\r\\nAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAYYwfwYIKwYBBQUHAQEEczBxMDIG\\r\\nCCsGAQUFBzABhiZodHRwOi8vaXNyZy50cnVzdGlkLm9jc3AuaWRlbnRydXN0LmNv\\r\\nbTA7BggrBgEFBQcwAoYvaHR0cDovL2FwcHMuaWRlbnRydXN0LmNvbS9yb290cy9k\\r\\nc3Ryb290Y2F4My5wN2MwHwYDVR0jBBgwFoAUxKexpHsscfrb4UuQdf/EFWCFiRAw\\r\\nVAYDVR0gBE0wSzAIBgZngQwBAgEwPwYLKwYBBAGC3xMBAQEwMDAuBggrBgEFBQcC\\r\\nARYiaHR0cDovL2Nwcy5yb290LXgxLmxldHNlbmNyeXB0Lm9yZzA8BgNVHR8ENTAz\\r\\nMDGgL6AthitodHRwOi8vY3JsLmlkZW50cnVzdC5jb20vRFNUUk9PVENBWDNDUkwu\\r\\nY3JsMB0GA1UdDgQWBBSoSmpjBH3duubRObemRWXv86jsoTANBgkqhkiG9w0BAQsF\\r\\nAAOCAQEA3TPXEfNjWDjdGBX7CVW+dla5cEilaUcne8IkCJLxWh9KEik3JHRRHGJo\\r\\nuM2VcGfl96S8TihRzZvoroed6ti6WqEBmtzw3Wodatg+VyOeph4EYpr/1wXKtx8/\\r\\nwApIvJSwtmVi4MFU5aMqrSDE6ea73Mj2tcMyo5jMd6jmeWUHK8so/joWUoHOUgwu\\r\\nX4Po1QYz+3dszkDqMp4fklxBwXRsW10KXzPMTZ+sOPAveyxindmjkW8lGy+QsRlG\\r\\nPfZ+G6Z6h7mjem0Y+iWlkYcV4PIWL1iwBi8saCbGS5jN2p8M+X+Q7UNKEkROb3N6\\r\\nKOqkqm57TH2H3eDJAkSnh6/DNFu0Qg==\\r\\n-----END CERTIFICATE-----\"\r\n      ]\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/certs/acmefinancial.net",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"certs",
								"acmefinancial.net"
							]
						}
					},
					"response": []
				},
				{
					"name": "5b) create self signed-certificate w/o private-key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bcfa36a-d6ee-4fd4-9423-a4db585f353d",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "29aa0a9f-d292-44b8-89b6-1b661b492505",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"resource_id\": \"server-00.acmefinancial.net\",\r\n  \"spec\": {\r\n    \"self_signed\": {\r\n      \"common_name\": \"servers.acmefinancial.net\",\r\n      \"locality\": \"Seattle\",\r\n      \"province\": \"wa\",\r\n      \"country\": \"US\",\r\n      \"organization\": \"Acme Financial\",\r\n      \"organizational_unit\": \"Widgets\",\r\n      \"subject_alternative_name\": \"acmefinancial.net\",\r\n      \"private_key\": \"\",\r\n      \"key_size\": 2048,\r\n      \"days\": 365\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/certs/server-00.acmefinancial.net",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"certs",
								"server-00.acmefinancial.net"
							]
						}
					},
					"response": []
				},
				{
					"name": "5c) create self signed-certificate w/ private-key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bcfa36a-d6ee-4fd4-9423-a4db585f353d",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "29aa0a9f-d292-44b8-89b6-1b661b492505",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"resource_id\": \"server-10.acmefinancial.net\",\r\n  \"spec\": {\r\n    \"self_signed\": {\r\n      \"common_name\": \"servers.acmefinancial.net\",\r\n      \"locality\": \"Seattle\",\r\n      \"province\": \"wa\",\r\n      \"country\": \"US\",\r\n      \"organization\": \"Acme Financial\",\r\n      \"organizational_unit\": \"Widgets\",\r\n      \"subject_alternative_name\": \"acmefinancial.net\",\r\n      \"private_key\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEpQIBAAKCAQEAwfI6w5GkK2b3vj0FH5lR8ySQIbUFDwWXVzDOMk21dGcMuQO2\\nknNCEIwv7Lj9w43N6epzkw7AxayEOyd420gULexe/RvkSDlTr5yUESQ99F1F3yZL\\nNZY1G5PHSREFCXt1tezC7x+ARtwmrdgeYityX6ab9ZjMu9lAdQiS23CQpKl7jiL6\\neL5Nfb/31bgX4S2cGp8Vc8eFY3uNGzjppZ+wLtNNTSMqyYCUUm1g/qT/dt9SiQgH\\nCrCdrhNE+f3NMght0XkybcIcBe5MhIwD1UPe+6gU+lYmfZA+rkoGtp6cY2ZO6215\\nkBKCSdanJkggr7yUZSaEW0jNpfvt1IZYYyIIUwIDAQABAoIBAGZ6nMxbt3hrhvqR\\neZSRyfiE2FfHM64VUTt0AXAZGYkxLkrQiHbnyf++Y1BdC1F6K1SvWnRY9kk89/3d\\nxIFxm6AMZsCtLTlweSSwwpgwI0BszI+1x0XAYb15n3KfOJ8jCjafrPz3EyveBd4T\\n9TIALQYXng7utzeG+wUcC6VB3Fv0emXMrYObKz53nkOaHpq8MmGjxqq9lyHPWuFL\\nRNSHh/Zqg1lpodUZ/KmQvGcL2/rb55KV7dNjeg3AaoFCWM9XUBz1esF72CL2eZq8\\nW00O4mXQL2lwfcVD9wZdcoiUxA3dgHkG54pmW/sqjc92LuMe/C/yrpyAUJlBJgMl\\nGutooGkCgYEA4G/CKOOqXc52VclCOkvasXL89T+JMTuAPtU9R1hcp5qjKUbWWh/t\\nmLmeamazbEyYKnMqX7tbd9wlJRqkuX9Zdmx8J0kjEW6Esx9GWs2rHZ84RwAg0LZ1\\n2+RnubaS7IWg+R7UbWcvDSz8AgqvfjaqHBsKO84D/7NeUlU8gtJ22L0CgYEA3Ti/\\nSXllDpEF7Px/MYzRATfoNLFTPlSC6VCH+aAQcSXz6DvBpYzqCHD1ic/0r92Qt7aq\\nwIvJlggGrlTIAMwbGkkofB4l894tg9RmD92glKy9H2U3tsVltv7uHW+ILo6MD9Lq\\nb7T1LqZFpXSD2fHzRUfdNIf7y0CpZY7sSYW7Hk8CgYEA0tgrDz7STk4n3W+1SA76\\n5Lmh6sRFnnrHgD/T0bKxWMNthNmHhiN4koHO0SaqaJOMYFTQ+h6JT5EBVFozZhC9\\newNvn3iV+UpaX+yBq8yLdMiflhQIwAqprmplB5L9dDYVg/PynNTS3w3jsgdX1rqE\\nFONSOdzQ5OcdNTveHQibngECgYEAtXRikuXcGoKiFa1Wt1IF7bXp5a691RaE+tNv\\ndTXxxp2W3xqE0EIxhRMClDPbRJW8qrROgvkmNMYIlN4930mLwZfYeVZRUyMeuk9y\\nF/l2Sf0Wc7YWaPipYdzhe4uMbIPIJwKeAVqw8b64yeo0bISlQmKb8wbHZgR37jG5\\nZuUmgskCgYEAyusEOOWQsPbipTvrbVUZ/6dW1oRJ+yBxI7uMu75NmVQrWmrGFBxf\\nvxXhNZ0J1vvZjy5zFrbMu478rQsyQQK18VR8j6D3PwhLQ8UXxWfPX3sdFsthAIPi\\nhMVHpGt0V4kooh/2QYVBGPV/pnmH3bpYA0DwoUUzszuGfIS7Wt9wnLE=\\n-----END RSA PRIVATE KEY-----\",\r\n      \"key_size\": 2048,\r\n      \"days\": 365\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/certs/server-10.acmefinancial.net",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"certs",
								"server-10.acmefinancial.net"
							]
						}
					},
					"response": []
				},
				{
					"name": "5d) create csr w/private-key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bcfa36a-d6ee-4fd4-9423-a4db585f353d",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "29aa0a9f-d292-44b8-89b6-1b661b492505",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"resource_id\": \"server-01\",\r\n  \"spec\": {\r\n    \"csr\": {\r\n      \"common_name\": \"server-01.acmefinancial.net\",\r\n      \"locality\": \"Seattle\",\r\n      \"province\": \"wa\",\r\n      \"country\": \"US\",\r\n      \"organization\": \"Acme Financial\",\r\n      \"organizational_unit\": \"Widgets\",\r\n      \"subject_alternative_name\": \"servers.acmefinancial.net\",\r\n      \"private_key\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEpQIBAAKCAQEAwfI6w5GkK2b3vj0FH5lR8ySQIbUFDwWXVzDOMk21dGcMuQO2\\nknNCEIwv7Lj9w43N6epzkw7AxayEOyd420gULexe/RvkSDlTr5yUESQ99F1F3yZL\\nNZY1G5PHSREFCXt1tezC7x+ARtwmrdgeYityX6ab9ZjMu9lAdQiS23CQpKl7jiL6\\neL5Nfb/31bgX4S2cGp8Vc8eFY3uNGzjppZ+wLtNNTSMqyYCUUm1g/qT/dt9SiQgH\\nCrCdrhNE+f3NMght0XkybcIcBe5MhIwD1UPe+6gU+lYmfZA+rkoGtp6cY2ZO6215\\nkBKCSdanJkggr7yUZSaEW0jNpfvt1IZYYyIIUwIDAQABAoIBAGZ6nMxbt3hrhvqR\\neZSRyfiE2FfHM64VUTt0AXAZGYkxLkrQiHbnyf++Y1BdC1F6K1SvWnRY9kk89/3d\\nxIFxm6AMZsCtLTlweSSwwpgwI0BszI+1x0XAYb15n3KfOJ8jCjafrPz3EyveBd4T\\n9TIALQYXng7utzeG+wUcC6VB3Fv0emXMrYObKz53nkOaHpq8MmGjxqq9lyHPWuFL\\nRNSHh/Zqg1lpodUZ/KmQvGcL2/rb55KV7dNjeg3AaoFCWM9XUBz1esF72CL2eZq8\\nW00O4mXQL2lwfcVD9wZdcoiUxA3dgHkG54pmW/sqjc92LuMe/C/yrpyAUJlBJgMl\\nGutooGkCgYEA4G/CKOOqXc52VclCOkvasXL89T+JMTuAPtU9R1hcp5qjKUbWWh/t\\nmLmeamazbEyYKnMqX7tbd9wlJRqkuX9Zdmx8J0kjEW6Esx9GWs2rHZ84RwAg0LZ1\\n2+RnubaS7IWg+R7UbWcvDSz8AgqvfjaqHBsKO84D/7NeUlU8gtJ22L0CgYEA3Ti/\\nSXllDpEF7Px/MYzRATfoNLFTPlSC6VCH+aAQcSXz6DvBpYzqCHD1ic/0r92Qt7aq\\nwIvJlggGrlTIAMwbGkkofB4l894tg9RmD92glKy9H2U3tsVltv7uHW+ILo6MD9Lq\\nb7T1LqZFpXSD2fHzRUfdNIf7y0CpZY7sSYW7Hk8CgYEA0tgrDz7STk4n3W+1SA76\\n5Lmh6sRFnnrHgD/T0bKxWMNthNmHhiN4koHO0SaqaJOMYFTQ+h6JT5EBVFozZhC9\\newNvn3iV+UpaX+yBq8yLdMiflhQIwAqprmplB5L9dDYVg/PynNTS3w3jsgdX1rqE\\nFONSOdzQ5OcdNTveHQibngECgYEAtXRikuXcGoKiFa1Wt1IF7bXp5a691RaE+tNv\\ndTXxxp2W3xqE0EIxhRMClDPbRJW8qrROgvkmNMYIlN4930mLwZfYeVZRUyMeuk9y\\nF/l2Sf0Wc7YWaPipYdzhe4uMbIPIJwKeAVqw8b64yeo0bISlQmKb8wbHZgR37jG5\\nZuUmgskCgYEAyusEOOWQsPbipTvrbVUZ/6dW1oRJ+yBxI7uMu75NmVQrWmrGFBxf\\nvxXhNZ0J1vvZjy5zFrbMu478rQsyQQK18VR8j6D3PwhLQ8UXxWfPX3sdFsthAIPi\\nhMVHpGt0V4kooh/2QYVBGPV/pnmH3bpYA0DwoUUzszuGfIS7Wt9wnLE=\\n-----END RSA PRIVATE KEY-----\",\r\n      \"key_size\": 2048\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/certs/server-01",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"certs",
								"server-01"
							]
						}
					},
					"response": []
				},
				{
					"name": "5e) update csr w/private-key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bcfa36a-d6ee-4fd4-9423-a4db585f353d",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "29aa0a9f-d292-44b8-89b6-1b661b492505",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"resource_id\": \"server-01\",\r\n  \"spec\": {\r\n    \"pem\": {\r\n      \"password\": \"\",\r\n      \"private_key\": \"\",\r\n      \"public_cert\": \"-----BEGIN CERTIFICATE-----\\nMIIDizCCAnMCCQCL5E7SY9OA4DANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMC\\nVVMxEzARBgNVBAgMCldhc2hpbmd0b24xEDAOBgNVBAcMB1NlYXR0bGUxFzAVBgNV\\nBAoMDkFjbWUgRmluYW5jaWFsMSYwJAYJKoZIhvcNAQkBFhdlbWFpbEBhY21lZmlu\\nYW5jaWFsLm5ldDEaMBgGA1UEAwwRYWNtZWZpbmFuY2lhbC5uZXQwHhcNMTkwMzE1\\nMjI1NjU0WhcNMTkwNDE0MjI1NjU0WjB9MQswCQYDVQQGEwJVUzELMAkGA1UECBMC\\nd2ExEDAOBgNVBAcTB1NlYXR0bGUxFzAVBgNVBAoTDkFjbWUgRmluYW5jaWFsMRAw\\nDgYDVQQLEwdXaWRnZXRzMSQwIgYDVQQDExtzZXJ2ZXItMDEuYWNtZWZpbmFuY2lh\\nbC5uZXQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDB8jrDkaQrZve+\\nPQUfmVHzJJAhtQUPBZdXMM4yTbV0Zwy5A7aSc0IQjC/suP3Djc3p6nOTDsDFrIQ7\\nJ3jbSBQt7F79G+RIOVOvnJQRJD30XUXfJks1ljUbk8dJEQUJe3W17MLvH4BG3Cat\\n2B5iK3Jfppv1mMy72UB1CJLbcJCkqXuOIvp4vk19v/fVuBfhLZwanxVzx4Vje40b\\nOOmln7Au001NIyrJgJRSbWD+pP9231KJCAcKsJ2uE0T5/c0yCG3ReTJtwhwF7kyE\\njAPVQ977qBT6ViZ9kD6uSga2npxjZk7rbXmQEoJJ1qcmSCCvvJRlJoRbSM2l++3U\\nhlhjIghTAgMBAAEwDQYJKoZIhvcNAQELBQADggEBACacSrfjQoVvIIq7sjubhvQr\\n4B3Ug1Ps6LAvNCG0887PvuaqF/ehZNqpyi5ay1AOb/9j2fek7GTLVAyYdW57KKcX\\nOpTaeNyoCd9vRUHB3cAMRPuAGVD4GZUaU1ItxOEThLNBYGf5+Wgt4sCTXeKkXAKh\\nhQyBeZ4nDPq4LFSuT6gmZWG8MuA/K/NKhdZSaNxhaVHBlpngkCkR+wyS0uGNXZK6\\nUYGlPwaMwwoVKgrJOlOQo/cnEq0D8yvHkVQ9Sjii5r/Tx/aQ7QI68WSEUzruS4y3\\nbJfNyLPZNDZqBqwE6goT0cWQVBPLW1uQVafKd4GuA9nCW4MQ4ug5Otf0QNAC0qU=\\n-----END CERTIFICATE-----\",\r\n      \"ca_certs\": []\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/certs/server-01",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"certs",
								"server-01"
							]
						}
					},
					"response": []
				},
				{
					"name": "5f) create csr w/o private-key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bcfa36a-d6ee-4fd4-9423-a4db585f353d",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "29aa0a9f-d292-44b8-89b6-1b661b492505",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"resource_id\": \"server-02\",\r\n  \"spec\": {\r\n    \"csr\": {\r\n      \"common_name\": \"server-02.acmefinancial.net\",\r\n      \"locality\": \"Seattle\",\r\n      \"province\": \"wa\",\r\n      \"country\": \"US\",\r\n      \"organization\": \"Acme Financial\",\r\n      \"organizational_unit\": \"Widgets\",\r\n      \"subject_alternative_name\": \"servers.acmefinancial.net\",\r\n      \"private_key\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEpQIBAAKCAQEAwfI6w5GkK2b3vj0FH5lR8ySQIbUFDwWXVzDOMk21dGcMuQO2\\nknNCEIwv7Lj9w43N6epzkw7AxayEOyd420gULexe/RvkSDlTr5yUESQ99F1F3yZL\\nNZY1G5PHSREFCXt1tezC7x+ARtwmrdgeYityX6ab9ZjMu9lAdQiS23CQpKl7jiL6\\neL5Nfb/31bgX4S2cGp8Vc8eFY3uNGzjppZ+wLtNNTSMqyYCUUm1g/qT/dt9SiQgH\\nCrCdrhNE+f3NMght0XkybcIcBe5MhIwD1UPe+6gU+lYmfZA+rkoGtp6cY2ZO6215\\nkBKCSdanJkggr7yUZSaEW0jNpfvt1IZYYyIIUwIDAQABAoIBAGZ6nMxbt3hrhvqR\\neZSRyfiE2FfHM64VUTt0AXAZGYkxLkrQiHbnyf++Y1BdC1F6K1SvWnRY9kk89/3d\\nxIFxm6AMZsCtLTlweSSwwpgwI0BszI+1x0XAYb15n3KfOJ8jCjafrPz3EyveBd4T\\n9TIALQYXng7utzeG+wUcC6VB3Fv0emXMrYObKz53nkOaHpq8MmGjxqq9lyHPWuFL\\nRNSHh/Zqg1lpodUZ/KmQvGcL2/rb55KV7dNjeg3AaoFCWM9XUBz1esF72CL2eZq8\\nW00O4mXQL2lwfcVD9wZdcoiUxA3dgHkG54pmW/sqjc92LuMe/C/yrpyAUJlBJgMl\\nGutooGkCgYEA4G/CKOOqXc52VclCOkvasXL89T+JMTuAPtU9R1hcp5qjKUbWWh/t\\nmLmeamazbEyYKnMqX7tbd9wlJRqkuX9Zdmx8J0kjEW6Esx9GWs2rHZ84RwAg0LZ1\\n2+RnubaS7IWg+R7UbWcvDSz8AgqvfjaqHBsKO84D/7NeUlU8gtJ22L0CgYEA3Ti/\\nSXllDpEF7Px/MYzRATfoNLFTPlSC6VCH+aAQcSXz6DvBpYzqCHD1ic/0r92Qt7aq\\nwIvJlggGrlTIAMwbGkkofB4l894tg9RmD92glKy9H2U3tsVltv7uHW+ILo6MD9Lq\\nb7T1LqZFpXSD2fHzRUfdNIf7y0CpZY7sSYW7Hk8CgYEA0tgrDz7STk4n3W+1SA76\\n5Lmh6sRFnnrHgD/T0bKxWMNthNmHhiN4koHO0SaqaJOMYFTQ+h6JT5EBVFozZhC9\\newNvn3iV+UpaX+yBq8yLdMiflhQIwAqprmplB5L9dDYVg/PynNTS3w3jsgdX1rqE\\nFONSOdzQ5OcdNTveHQibngECgYEAtXRikuXcGoKiFa1Wt1IF7bXp5a691RaE+tNv\\ndTXxxp2W3xqE0EIxhRMClDPbRJW8qrROgvkmNMYIlN4930mLwZfYeVZRUyMeuk9y\\nF/l2Sf0Wc7YWaPipYdzhe4uMbIPIJwKeAVqw8b64yeo0bISlQmKb8wbHZgR37jG5\\nZuUmgskCgYEAyusEOOWQsPbipTvrbVUZ/6dW1oRJ+yBxI7uMu75NmVQrWmrGFBxf\\nvxXhNZ0J1vvZjy5zFrbMu478rQsyQQK18VR8j6D3PwhLQ8UXxWfPX3sdFsthAIPi\\nhMVHpGt0V4kooh/2QYVBGPV/pnmH3bpYA0DwoUUzszuGfIS7Wt9wnLE=\\n-----END RSA PRIVATE KEY-----\",\r\n      \"key_size\": 2048\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/certs/server-02",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"certs",
								"server-02"
							]
						}
					},
					"response": []
				},
				{
					"name": "5g) Add new certificate (PKCS12)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bcfa36a-d6ee-4fd4-9423-a4db585f353d",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "29aa0a9f-d292-44b8-89b6-1b661b492505",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"spec\": {\r\n        \"pkcs12\": {\r\n            \"data\": \"MIIJmQIBAzCCCV8GCSqGSIb3DQEHAaCCCVAEgglMMIIJSDCCA/8GCSqGSIb3DQEHBqCCA/AwggPsAgEAMIID5QYJKoZIhvcNAQcBMBwGCiqGSIb3DQEMAQYwDgQI9/IuGV++nF4CAggAgIIDuCkthVZYtM2f38YAkHtW8bYllfycis+b35fl155zxVAfPyyDbangDreCTIQXuKWeD+Wubo7Fm4KvrFdqGdbXHSlVX3bvAOcZ0qRg6FwRp7RQHNURKLaOWyuNuA30AO1JBIgLB3Aa/iS3dKYzwXGKwsYc71tHrd9eqARChtZb7/LA1CxTM+s6c0bj7jsUzDdvohNGaXy5/d9+zi5TqpAROy0qdgYg9Upae38EUS00p+av8lVO0yF/0Kvls3kUavWCVZqgcPAED3oLg4eeLg51W/63ahRhB2tvFUlNZLGM6bt8aSFOGNFPYEid3LnVnMdr/t/ARdRyV2EmAHjnzffKqGsbsfRdgOY0Bk+WZ5ytFMnkzAdPox6+XFrkvu6t4tUweQfmkHhHnIdiQ1IugzsE1jdt6NauzsOeDS2btJCxUus0BpBbc2q0OkwgoMkqzKi9de0fgPTH5eiPqIex163su8u4Tisn3+vKp41aEQn1/emJk6pWSDAKoooVJ/Q9uxSLeeJG4TRodF8nl81bMzsVlACRRfYR707ZAUef+hiJs40E08IpM49HKSZ0503yxx0ti/cswiy34Xk5nZygEUuDXvzseKsjgzvh5ozZZyVt/bKrbtX5AlPpxV5vD+5V4xpwJzlvyQ7ZHL9cK/eYaimp9uLo4YhhCGo84wRTWWhNzj5m1F9zy0eezPUi6mfezXUuTXvtPsJMra3/k1RSbNdUG86Wqvpeg3+2LzExXyoOti2ca9fqfux9mGwY6A++ubN8y9Xz36Ujgry2CyS939NnhwHKHOFHJHfV7aeuyQaW1jigWJJ9ScH2Yjd4dmpcBfzJmb+6v74W0LQfYvVbNmoRxufjuMqS4h3rp+jw2LLQVahcR3R2y/XJe8SVXR5zqf8ZFVAcnid36Txdxvyn1wqf0XWMTSibtQEBjNKq1+ReHbhKkba5bX0y6hTd+8OGt/rLOZzthCihQG1m3eIYe1/U69XvehdmjIs5M4R7I/7sHWGVeS8PTQXOytGdwzmTO+NReCWM1N9UzBDRW/gfJhghKbQVG1aDVi0KneWZmPhEHT7x59w/myVohcM0BzXVcU9OnXW6jS35BIXXOeCEACqUlRbWu8i8sfQjJio1wkQuK752foJ1azhgndR0OHxsrd++M6XicDRXu85djDN5nujevwOJhFwXO053jofWvZHjYtBy/OMng+NXIVONXjjfYPnAHs8yC65VT6OQwphlp5uofURPmJCi8kwql0EGT6EocUUufaIcA1tlVh0wggVBBgkqhkiG9w0BBwGgggUyBIIFLjCCBSowggUmBgsqhkiG9w0BDAoBAqCCBO4wggTqMBwGCiqGSIb3DQEMAQMwDgQIkOAnwn5GYgYCAggABIIEyGGkrsdtMIBUsAZmhsLOS78yvTvUubOwApVT2pp+UxYEuAn1c4MBAqNHnB5YpYJYIEJceX4iQhxZG3jxDXQ8xAnhNZo7UnTRqTaInsNgI5r3CF0/lWI/wa8HkkSY1rCo2UGKNhvs1AgpwRayfiN8oTEjR3d4uEfGf2XsHRaJoucmyAHfD6zor0swh6dl8tJu64Ea2P5B58vd9PFV9fRLewyj5ZAMWFt78CdAunenaea6Pv0uNgo2R8O54NtHFA+DC9Qg6hobzfwqQYb2gjZd46Bt9j7rSGTPdGhXgmuDjOd62RNoSiVD3S1uB/rOYy8dmK/E0KfFSsdt50PdCJjWg2xfJUMGLso7wwAwGvgvC2s05NYP7UPZdtF2t90AEU0ZLpH0prnvBAjnk69+jk0hDujx+2jvvwbWqwtkmApXSmVk7/XW7HfXLIx1YkBQXRJDGkIHSyQVhlBJWFMsw38+wUKz6E/VmN4aaTD3DHwWRMl75liYIfWEjfXVbMr/nOqlLSC/aqMCyGoErC2v7YvkH7hbvUd0CWzbenArVLTZHP0khAH9/RVhof2ujrPibXUJA5HU7k2O7Mo2ENrBt4cd1sm3qAbc8WbZNSFTtsGL0y1jnGlDBeTImKSHZMkzUHoOU0DPxJdCGoZeBkxu6SafnS7BoquNwKOaXGKA8QGWbCCVLw/yXmYHNP2az4SqhEST4SajMXuq1Ct2f1lS9m7okw2zHqd6cqanYWqBF+MAsIgavxjmEk+AU0gazkcmg7eHnqxWHR0nKucxCVx2bXMC+/GFby8KLymVa8KPUpXip62t6egsNda2fCdRm10f6gEaZCUzQQvIxg31XcMIjXg4cyjhx9oNPG8rymRqu5gNsonCtGaCWureY6RV30yxonTYBmH4rTpY3APrL19yr7w6XAZxUjlnAtYEjyUdYQKImaAFPgWFr3tL1zC8linJa7AQbdfsliUF+2Zez8pfNjqUFbDv6LxxyC1j/xVgEFEcuRY7AEE1Ogl+lipI/1pwyL9GdHzGfRipNrgwkINma4s0bvPDU8cMa59ej/0EMYdlVohqe/7vwA4JQo8P+zyGw+2lJC2m4pkF7t1Coft+ckR5TQhcuOaoQv4crn9D9bQv9PF3JWn8Vxjj3fjjM9MjrkFU5pP6Kkh78epb5JA1G0K6X2/VHPxm3LhgoTpa3f5zGk1QdtTG7LBGaMNzyU/tBYqrAwhSAcMoFTJ0knEocaoBKdFvUI64hUaBPdfFoZhWR0kdwPpTU9f5viM1B0N3xnpwKpdD/Kkx+K348LQNr2RBEPlw1AkXdm3GB6LxA17MLspg+Tw5Oi12ApKREe3Svo+EY3Ra0EETLT0ZSinbeiBKFEBpK9qV2S6WwDtSRBfTTXUoiX/JHoq+ChMRcNoNAkBmX5dD781aIv0FhnRpt1i53sAacXnTVL5yXGcjs98e+0DWFaCKwJe/j1gAZl2p8fX7K3X0/PGjFA2PRFGH+jnI+Ig8qhXldupwiKthPxZviBVnHL35sgfBU2Gd/13jcbgaEqHvO2B93w8TrivuYUxQ+dMrH99BRqNjapze2jbBonKTa3FEfmcnlw/WWb7i8qpgBat81dRLGRfhB28mcGOecm/aM3++2V3GzjElMCMGCSqGSIb3DQEJFTEWBBTK6qJFT7lbhYQs60PBf534nIJFijAxMCEwCQYFKw4DAhoFAAQU/o+Q3r0pYnuQjdWKLF+dulLdoxwECOiI5c02oU2jAgIIAA==\",\r\n            \"password\": \"123456\"\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/certs/dayinparadise.com",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"certs",
								"dayinparadise.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "6) GET certificates managed by Blue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5b769a7-42d3-4db9-9e7b-6b642ecca993",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/certs",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"certs"
							]
						}
					},
					"response": []
				},
				{
					"name": "7) Logout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
								"exec": [
									"pm.test(\"Logout\", function () {",
									"    ",
									"    pm.globals.unset(\"TOKEN\");",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"state\": {\n        \"token\": \"{{TOKEN}}\"\n    }\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/logout",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "5h) Add new certificate (ECC)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bcfa36a-d6ee-4fd4-9423-a4db585f353d",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "29aa0a9f-d292-44b8-89b6-1b661b492505",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"spec\": {\r\n    \"pem\": {\r\n      \"password\": \"\",\r\n      \"private_key\": \"-----BEGIN EC PRIVATE KEY-----\\nMIGkAgEBBDDIDCXhlDSdRqt+xqVuWPRlf+i51F2vZnFz06oDefuQZVrAt2ZIR055\\nlPqm6E6D8BGgBwYFK4EEACKhZANiAARymYllCYS+Oz+zUGQ7SV85PS/hNLfidktp\\ngd34UKCCJ9rC8oFpp1sT69kiHzigG87pFnNqE1AlFPkYuFzqIdfHE1KxBi5T2XwL\\no0uvOr2TMKU1TSkhzsw60I1tk4h9mRU=\\n-----END EC PRIVATE KEY-----\",\r\n      \"public_cert\": \"-----BEGIN CERTIFICATE-----\\nMIICfTCCAgOgAwIBAgIIF+5/M8Bs46MwCgYIKoZIzj0EAwIwYDELMAkGA1UEBhMC\\nVUsxDzANBgNVBAgTBkxvbmRvbjEPMA0GA1UEBxMGTG9uZG9uMQswCQYDVQQKEwJG\\nNTELMAkGA1UECxMCRVMxFTATBgNVBAMTDHN0ZWZhbm80LmNvbTAeFw0xOTAxMDcx\\nNTA4MDBaFw0yMDAxMDcxNTA4MDBaMGAxCzAJBgNVBAYTAlVLMQ8wDQYDVQQIEwZM\\nb25kb24xDzANBgNVBAcTBkxvbmRvbjELMAkGA1UEChMCRjUxCzAJBgNVBAsTAkVT\\nMRUwEwYDVQQDEwxzdGVmYW5vNC5jb20wdjAQBgcqhkjOPQIBBgUrgQQAIgNiAARy\\nmYllCYS+Oz+zUGQ7SV85PS/hNLfidktpgd34UKCCJ9rC8oFpp1sT69kiHzigG87p\\nFnNqE1AlFPkYuFzqIdfHE1KxBi5T2XwLo0uvOr2TMKU1TSkhzsw60I1tk4h9mRWj\\ngYkwgYYwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQUvLf25wv2i4EHYiyKqu8fSkJZ\\nOKIwCwYDVR0PBAQDAgXgMBcGA1UdEQQQMA6CDHN0ZWZhbm80LmNvbTARBglghkgB\\nhvhCAQEEBAMCBkAwHgYJYIZIAYb4QgENBBEWD3hjYSBjZXJ0aWZpY2F0ZTAKBggq\\nhkjOPQQDAgNoADBlAjAk5qlKjSNnypdfIW5uE49NNct0ALAyrpzPhSHx531rk6Vf\\n46Hi9tbOnbv5RYjcPMACMQDE8usmBl4U1y5HseVZpAV3X/ubhh75m/uQ10QxdGZF\\nq10r7Qh2UTsgpvBzmxAQSMQ=\\n-----END CERTIFICATE-----\\n\",\r\n      \"ca_certs\": []\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/certs/seattlesunshine.com",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"certs",
								"seattlesunshine.com"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4) App definition with health monitoring",
			"item": [
				{
					"name": "1) Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
								"exec": [
									"pm.test(\"Authenticate\", function () {\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									" \r",
									"    pm.globals.set(\"TOKEN\", jsonData.state.token);\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"admin\",\n\t\t\"password\": \"{{PASSWORD}}\"\n\t}\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2) Workload health monitoring monitored-application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "74e22268-a04e-4d52-8d33-cb33e5e92119",
								"exec": [
									"requestBody = JSON.parse(request.data);",
									"Object.keys(requestBody.spec.services).forEach( function(path){",
									"    Object.keys(requestBody.spec.services[path].egress.workloads).forEach(function(workload){",
									"        let w = workload.split('//')[1].split(':')[0];",
									"        if (w.startsWith('{{') && w.endsWith('}}')) {",
									"            let wl = w.substring(2,w.length-2);",
									"            if (/[<>/\\\\${}]/g.test(pm.variables.get(wl)) || pm.variables.get(wl) === undefined || !(pm.variables.get(wl))) {",
									"                throw new Error(\"Egress Workload variable \" + wl + \" contains an invalid character or  is undefined: \" +  pm.variables.get(wl));",
									"            }",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9d659eec-2b09-4215-93b1-2df3b3516222",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"spec\": {\r\n        \"display_name\": \"App Two\",\r\n        \"description\": \"Olivia's second monitored app\",\r\n        \"certs\": {\r\n            \"cert-2\": {\r\n                \"pem\": {\r\n                    \"password\": \"\",\r\n                    \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCfeMhtEfhMWrPa\\nZAo64fNYcNg9uJjA+KzNqK9vQ5N/yFjxXEtL4/qVVNLd5aX1w8evk0cYNS3fFT24\\ne3sSilwOD3fWSg3ilDlELaVzgUpU233ONb6ksVvv6Pw2t19UZTVXT1qg+zdksO47\\n9hIP4AiaEKIl3gO3u4m5GOzQtMcGUumOt9IdZF9CK3vrVD7lD5+aF/7pZ792drED\\ncfJFgGX0j97gx1h+fRU5PJthcIx1QIhcYmdeFFycEgVoIaL7hgk07ij5hee6gH49\\n1R/zZp4PvJ119eikzN5Mc9kgtvAp5HBXdGtn1A2hpifMz50xvOeekYdEl2Z24Vyw\\n850mqbR/AgMBAAECggEAdNcY+hjtdHwMRFmByUydb9IWDXq/qLtKWNBb4UiAvGH9\\nELIPlQXvJhRk/yFwLBYKq1BcCZeFCWrVsuH99UKcWczpf374l2cEYjiTfYJgBLZg\\ngYKNMLul4awxhqFp3jrdDyBcBZCqMEMV+aa76xe5FbBULSxySt7D9HMXp36cR7u1\\na9qHOpySa4IciKghW3NIBUEW85iYPIf/VnwdaLvvQrwMkzhvYyfS2q5HGOAs1Ngi\\nvYxv4spWFhh/xX9O0K0c87/hw5eBNgBntduYZC7zGLj3HeQH5NJZawJ1Npwf0xaP\\nofb8qTkKWlpCuiCXTp3VCkBmFvBZDZpSZaXBHKQAaQKBgQDT5l3UkgMs85f11SfW\\nv0hKvx/sDWMtjtZMLy+tQob5P8mpclQUkTYZKFNeJjg6jmzlDiclV5BKOOfoGlOY\\nttUe782mEhwkd125CDWCZa+xpVxMAQNH0P/aNn4BxbdJjMyUlOZOia07RCN4XVtz\\nNxaqLPvpgC1EJMWziiHWS8L7YwKBgQDAqSVsAuE3CnQcVVODTYglYD/OonZE7GLi\\nu+Wm+6m/B9+zuKXeQMhXaDJh6S2jJGI9g5URsdc4wWZnNVwYRM8KLfEBY9TmMPEP\\nvd3wTzev466qJWxTL7E84/JacHjOPF45bkBCeYRSUV9zCIoIAC1mOTUYDuHC1bZ4\\nTL2/cTiDNQKBgB01ojWNMxbdNVNT4Lv/fi2fjvzxE3zSNcQmtQHDK+vr2Rache6X\\n3cc2Adf2mMWpoGUqwEarfV5d3cnm5yMkANjU4ZpE4NA+DBNXiFjDP6bTTpfDg/pA\\nWyRvYotH/+4JlKHerKii3dhPmjwbUmHddChdLxSO8K52CzKmled+ZhBVAoGBAL6T\\nkwzxHE8R7CFK1j2AKDiwqO2CD3PGUVrvexBeyV7KLyLceFcNxh+QVqY7voUurG8l\\nBgRm4vqldOKLCfqHtjXflBNH6YV6zDpCGpRoCDHZCyILusfe2XfeFBIaR6XaWWp+\\nANrA0X+MNtrXi5K2ejIwTLDrp67PMJx3bQs+uCQxAoGAAVIHW3r9R7HNHhbjQjV+\\n4ZEwXycmCtYgRdD4APrOp9T62QT1epi867OEm68ySkTpJZCFYELwKdK16a9EMU5M\\nGmY9zKXVePfPSS+x6krfN4Rz2zlcY32vdME2ZNPCMUOgjXPCxSOhyJ8cFHQobted\\n8agAnCJ36UwdqV5mzwPtVkc=\\n-----END PRIVATE KEY-----\\n\",\r\n                    \"public_cert\": \"-----BEGIN CERTIFICATE-----\\nMIIDjDCCAnQCCQC/hdihUFWIWTANBgkqhkiG9w0BAQsFADCBhzELMAkGA1UEBhMC\\nVVMxEzARBgNVBAgMCldhc2hpbmd0b24xEDAOBgNVBAcMB1NlYXR0bGUxFDASBgNV\\nBAoMC0hlbGxvSGVhbHRoMRcwFQYDVQQDDA5IZWxsb0hlYWx0aC5pbzEiMCAGCSqG\\nSIb3DQEJARYTcm9vdEBIZWxsb0hlYWx0aC5pbzAeFw0xODA4MDQwMTAzMjhaFw0x\\nOTA4MDQwMTAzMjhaMIGHMQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3Rv\\nbjEQMA4GA1UEBwwHU2VhdHRsZTEUMBIGA1UECgwLSGVsbG9IZWFsdGgxFzAVBgNV\\nBAMMDkhlbGxvSGVhbHRoLmlvMSIwIAYJKoZIhvcNAQkBFhNyb290QEhlbGxvSGVh\\nbHRoLmlvMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn3jIbRH4TFqz\\n2mQKOuHzWHDYPbiYwPiszaivb0OTf8hY8VxLS+P6lVTS3eWl9cPHr5NHGDUt3xU9\\nuHt7EopcDg931koN4pQ5RC2lc4FKVNt9zjW+pLFb7+j8NrdfVGU1V09aoPs3ZLDu\\nO/YSD+AImhCiJd4Dt7uJuRjs0LTHBlLpjrfSHWRfQit761Q+5Q+fmhf+6We/dnax\\nA3HyRYBl9I/e4MdYfn0VOTybYXCMdUCIXGJnXhRcnBIFaCGi+4YJNO4o+YXnuoB+\\nPdUf82aeD7yddfXopMzeTHPZILbwKeRwV3RrZ9QNoaYnzM+dMbznnpGHRJdmduFc\\nsPOdJqm0fwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQCHalSX6X8SUkL0QliU/hOW\\noQulgTULr3HcXR55gDErhQPQ/66QIV5uJjUpdRiyYmRikS/h0Zcs3ZzFkZlD31cF\\nqXgYqpvBxCtkXfRwedu+HLzVq7O5pdTRTNtoynJbdo1RXNsaP1sgK5qr806RsWLk\\njW4mmzDPXl6Z1wf2fwa05QHJiQSANzDhOrPSmW5YUZojV5dMDGN8JmlnH3ESdDSc\\n5fPR2f+IoUTet4CmHqdRPb7xyiEbk+krYuYLTENBh1Bn5YEgprV+DgAtQ6cBMOTX\\n1UlfOILhhXpjVar3WOLU6hEOosB2I+oYQxeHNLMrAhtMfmRkJWbGHYeOd2F1Ac1T\\n-----END CERTIFICATE-----\\n\",\r\n                    \"ca_certs\": []\r\n                }\r\n            }\r\n        },\r\n        \"services\": {\r\n            \"http-path-80\": {\r\n                \"ingress\": {\r\n                    \"uris\": {\r\n                        \"http://monitor.com\": {}\r\n                    }\r\n                },\r\n                \"egress\": {\r\n                    \"workloads\": {\r\n                        \"http://{{WORKLOAD_01}}\": {},\r\n                        \"http://{{WORKLOAD_02}}\": {}\r\n                    },\r\n                    \"monitors\": {\r\n                        \"http\": {\r\n                            \"default_state\": \"UNKNOWN\",\r\n                            \"interval_seconds\": 10,\r\n                            \"consecutive_success_threshold\": 2,\r\n                            \"consecutive_failure_threshold\": 2,\r\n                            \"request\": null,\r\n                            \"response\": {\r\n                                \"status_codes\": [],\r\n                                \"headers\": {},\r\n                                \"body\": \"\",\r\n                                \"timeout_seconds\": 3\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"https-path-443\": {\r\n                \"ingress\": {\r\n                    \"uris\": {\r\n                        \"https://monitor.com\": {\r\n                            \"tls\": {\r\n                                \"cert_id\": \"cert-2\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"egress\": {\r\n                    \"load_balancing_method\": \"ROUNDROBIN\",\r\n                    \"tls\": {\r\n                        \"authentication\": \"NONE\"\r\n                    },\r\n                    \"workloads\": {\r\n                        \"https://{{WORKLOAD_01}}\": {},\r\n                        \"https://{{WORKLOAD_02}}\": {}\r\n                    },\r\n                    \"monitors\": {\r\n                        \"https\": {\r\n                            \"default_state\": \"UNKNOWN\",\r\n                            \"interval_seconds\": 10,\r\n                            \"consecutive_success_threshold\": 2,\r\n                            \"consecutive_failure_threshold\": 2,\r\n                            \"request\": null,\r\n                            \"response\": {\r\n                                \"status_codes\": [],\r\n                                \"headers\": {},\r\n                                \"body\": \"\",\r\n                                \"timeout_seconds\": 3\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"https-path-8443\": {\r\n                \"ingress\": {\r\n                    \"uris\": {\r\n                        \"https://monitor.com:8443\": {\r\n                            \"tls\": {\r\n                                \"cert_id\": \"cert-2\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"egress\": {\r\n                    \"load_balancing_method\": \"ROUNDROBIN\",\r\n                    \"tls\": {\r\n                        \"authentication\": \"NONE\"\r\n                    },\r\n                    \"workloads\": {\r\n                        \"https://{{WORKLOAD_01}}:8443\": {},\r\n                        \"https://{{WORKLOAD_02}}:8443\": {}\r\n                    },\r\n                    \"monitors\": {\r\n                        \"https\": {\r\n                            \"default_state\":\"UNKNOWN\",\r\n                            \"interval_seconds\":12,\r\n                            \"consecutive_success_threshold\":4,\r\n                            \"consecutive_failure_threshold\":4,\r\n                            \"request\": {\r\n                                \"method\":\"GET\",\r\n                                \"path\":\"/\",       \r\n                                \"headers\":{},\r\n                                \"body\":\"\"\r\n                            },\r\n                            \"response\": {\r\n                                \"status_codes\":[\"200\"],\r\n                                \"headers\":{},\r\n                                \"body\":\"\",\r\n                                \"timeout_seconds\":10\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps/monitored-application",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps",
								"monitored-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "3) GET monitored-application deployment status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96a2e11c-e9c5-4f31-9e67-0751c307119b",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps/monitored-application",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps",
								"monitored-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "4) Add failing pool member to monitored-application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98ed8ee7-3520-44dc-950c-38e200f98c55",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "43d660ed-07a1-49ed-91cd-e54b56eb21ea",
								"exec": [
									"requestBody = JSON.parse(request.data);",
									"Object.keys(requestBody.spec.services).forEach( function(path){",
									"    Object.keys(requestBody.spec.services[path].egress.workloads).forEach(function(workload){",
									"        let w = workload.split('//')[1].split(':')[0];",
									"        if (w.startsWith('{{') && w.endsWith('}}')) {",
									"            let wl = w.substring(2,w.length-2);",
									"            if (/[<>/\\\\${}]/g.test(pm.variables.get(wl)) || pm.variables.get(wl) === undefined || !(pm.variables.get(wl))) {",
									"                throw new Error(\"Egress Workload variable \" + wl + \" contains an invalid character or  is undefined: \" +  pm.variables.get(wl));",
									"            }",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"spec\": {\r\n        \"display_name\": \"App Two\",\r\n        \"description\": \"Olivia's second monitored app\",\r\n        \"certs\": {\r\n            \"cert-2\": {\r\n                \"pem\": {\r\n                    \"password\": \"\",\r\n                    \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCfeMhtEfhMWrPa\\nZAo64fNYcNg9uJjA+KzNqK9vQ5N/yFjxXEtL4/qVVNLd5aX1w8evk0cYNS3fFT24\\ne3sSilwOD3fWSg3ilDlELaVzgUpU233ONb6ksVvv6Pw2t19UZTVXT1qg+zdksO47\\n9hIP4AiaEKIl3gO3u4m5GOzQtMcGUumOt9IdZF9CK3vrVD7lD5+aF/7pZ792drED\\ncfJFgGX0j97gx1h+fRU5PJthcIx1QIhcYmdeFFycEgVoIaL7hgk07ij5hee6gH49\\n1R/zZp4PvJ119eikzN5Mc9kgtvAp5HBXdGtn1A2hpifMz50xvOeekYdEl2Z24Vyw\\n850mqbR/AgMBAAECggEAdNcY+hjtdHwMRFmByUydb9IWDXq/qLtKWNBb4UiAvGH9\\nELIPlQXvJhRk/yFwLBYKq1BcCZeFCWrVsuH99UKcWczpf374l2cEYjiTfYJgBLZg\\ngYKNMLul4awxhqFp3jrdDyBcBZCqMEMV+aa76xe5FbBULSxySt7D9HMXp36cR7u1\\na9qHOpySa4IciKghW3NIBUEW85iYPIf/VnwdaLvvQrwMkzhvYyfS2q5HGOAs1Ngi\\nvYxv4spWFhh/xX9O0K0c87/hw5eBNgBntduYZC7zGLj3HeQH5NJZawJ1Npwf0xaP\\nofb8qTkKWlpCuiCXTp3VCkBmFvBZDZpSZaXBHKQAaQKBgQDT5l3UkgMs85f11SfW\\nv0hKvx/sDWMtjtZMLy+tQob5P8mpclQUkTYZKFNeJjg6jmzlDiclV5BKOOfoGlOY\\nttUe782mEhwkd125CDWCZa+xpVxMAQNH0P/aNn4BxbdJjMyUlOZOia07RCN4XVtz\\nNxaqLPvpgC1EJMWziiHWS8L7YwKBgQDAqSVsAuE3CnQcVVODTYglYD/OonZE7GLi\\nu+Wm+6m/B9+zuKXeQMhXaDJh6S2jJGI9g5URsdc4wWZnNVwYRM8KLfEBY9TmMPEP\\nvd3wTzev466qJWxTL7E84/JacHjOPF45bkBCeYRSUV9zCIoIAC1mOTUYDuHC1bZ4\\nTL2/cTiDNQKBgB01ojWNMxbdNVNT4Lv/fi2fjvzxE3zSNcQmtQHDK+vr2Rache6X\\n3cc2Adf2mMWpoGUqwEarfV5d3cnm5yMkANjU4ZpE4NA+DBNXiFjDP6bTTpfDg/pA\\nWyRvYotH/+4JlKHerKii3dhPmjwbUmHddChdLxSO8K52CzKmled+ZhBVAoGBAL6T\\nkwzxHE8R7CFK1j2AKDiwqO2CD3PGUVrvexBeyV7KLyLceFcNxh+QVqY7voUurG8l\\nBgRm4vqldOKLCfqHtjXflBNH6YV6zDpCGpRoCDHZCyILusfe2XfeFBIaR6XaWWp+\\nANrA0X+MNtrXi5K2ejIwTLDrp67PMJx3bQs+uCQxAoGAAVIHW3r9R7HNHhbjQjV+\\n4ZEwXycmCtYgRdD4APrOp9T62QT1epi867OEm68ySkTpJZCFYELwKdK16a9EMU5M\\nGmY9zKXVePfPSS+x6krfN4Rz2zlcY32vdME2ZNPCMUOgjXPCxSOhyJ8cFHQobted\\n8agAnCJ36UwdqV5mzwPtVkc=\\n-----END PRIVATE KEY-----\\n\",\r\n                    \"public_cert\": \"-----BEGIN CERTIFICATE-----\\nMIIDjDCCAnQCCQC/hdihUFWIWTANBgkqhkiG9w0BAQsFADCBhzELMAkGA1UEBhMC\\nVVMxEzARBgNVBAgMCldhc2hpbmd0b24xEDAOBgNVBAcMB1NlYXR0bGUxFDASBgNV\\nBAoMC0hlbGxvSGVhbHRoMRcwFQYDVQQDDA5IZWxsb0hlYWx0aC5pbzEiMCAGCSqG\\nSIb3DQEJARYTcm9vdEBIZWxsb0hlYWx0aC5pbzAeFw0xODA4MDQwMTAzMjhaFw0x\\nOTA4MDQwMTAzMjhaMIGHMQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3Rv\\nbjEQMA4GA1UEBwwHU2VhdHRsZTEUMBIGA1UECgwLSGVsbG9IZWFsdGgxFzAVBgNV\\nBAMMDkhlbGxvSGVhbHRoLmlvMSIwIAYJKoZIhvcNAQkBFhNyb290QEhlbGxvSGVh\\nbHRoLmlvMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn3jIbRH4TFqz\\n2mQKOuHzWHDYPbiYwPiszaivb0OTf8hY8VxLS+P6lVTS3eWl9cPHr5NHGDUt3xU9\\nuHt7EopcDg931koN4pQ5RC2lc4FKVNt9zjW+pLFb7+j8NrdfVGU1V09aoPs3ZLDu\\nO/YSD+AImhCiJd4Dt7uJuRjs0LTHBlLpjrfSHWRfQit761Q+5Q+fmhf+6We/dnax\\nA3HyRYBl9I/e4MdYfn0VOTybYXCMdUCIXGJnXhRcnBIFaCGi+4YJNO4o+YXnuoB+\\nPdUf82aeD7yddfXopMzeTHPZILbwKeRwV3RrZ9QNoaYnzM+dMbznnpGHRJdmduFc\\nsPOdJqm0fwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQCHalSX6X8SUkL0QliU/hOW\\noQulgTULr3HcXR55gDErhQPQ/66QIV5uJjUpdRiyYmRikS/h0Zcs3ZzFkZlD31cF\\nqXgYqpvBxCtkXfRwedu+HLzVq7O5pdTRTNtoynJbdo1RXNsaP1sgK5qr806RsWLk\\njW4mmzDPXl6Z1wf2fwa05QHJiQSANzDhOrPSmW5YUZojV5dMDGN8JmlnH3ESdDSc\\n5fPR2f+IoUTet4CmHqdRPb7xyiEbk+krYuYLTENBh1Bn5YEgprV+DgAtQ6cBMOTX\\n1UlfOILhhXpjVar3WOLU6hEOosB2I+oYQxeHNLMrAhtMfmRkJWbGHYeOd2F1Ac1T\\n-----END CERTIFICATE-----\\n\",\r\n                    \"ca_certs\": []\r\n                }\r\n            }\r\n        },\r\n        \"services\": {\r\n            \"http-path-80\": {\r\n                \"ingress\": {\r\n                    \"uris\": {\r\n                        \"http://monitor.com\": {}\r\n                    }\r\n                },\r\n                \"egress\": {\r\n                    \"workloads\": {\r\n                        \"http://{{WORKLOAD_01}}\": {},\r\n                        \"http://{{WORKLOAD_02}}\": {}\r\n                    },\r\n                    \"monitors\": {\r\n                        \"http\": {\r\n                            \"default_state\": \"UNKNOWN\",\r\n                            \"interval_seconds\": 10,\r\n                            \"consecutive_success_threshold\": 2,\r\n                            \"consecutive_failure_threshold\": 2,\r\n                            \"request\": null,\r\n                            \"response\": {\r\n                                \"status_codes\": [],\r\n                                \"headers\": {},\r\n                                \"body\": \"\",\r\n                                \"timeout_seconds\": 3\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"https-path-443\": {\r\n                \"ingress\": {\r\n                    \"uris\": {\r\n                        \"https://monitor.com\": {\r\n                            \"tls\": {\r\n                                \"cert_id\": \"cert-2\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"egress\": {\r\n                    \"load_balancing_method\": \"ROUNDROBIN\",\r\n                    \"tls\": {\r\n                        \"authentication\": \"NONE\"\r\n                    },\r\n                    \"workloads\": {\r\n                        \"https://{{WORKLOAD_01}}\": {},\r\n                        \"https://{{WORKLOAD_02}}\": {},\r\n                        \"https://172.16.0.42\": {}\r\n                    },\r\n                    \"monitors\": {\r\n                        \"https\": {\r\n                            \"default_state\": \"UNKNOWN\",\r\n                            \"interval_seconds\": 10,\r\n                            \"consecutive_success_threshold\": 2,\r\n                            \"consecutive_failure_threshold\": 2,\r\n                            \"request\": null,\r\n                            \"response\": {\r\n                                \"status_codes\": [],\r\n                                \"headers\": {},\r\n                                \"body\": \"\",\r\n                                \"timeout_seconds\": 3\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"https-path-8443\": {\r\n                \"ingress\": {\r\n                    \"uris\": {\r\n                        \"https://monitor.com:8443\": {\r\n                            \"tls\": {\r\n                                \"cert_id\": \"cert-2\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"egress\": {\r\n                    \"load_balancing_method\": \"ROUNDROBIN\",\r\n                    \"tls\": {\r\n                        \"authentication\": \"NONE\"\r\n                    },\r\n                    \"workloads\": {\r\n                        \"https://{{WORKLOAD_01}}:8443\": {},\r\n                        \"https://{{WORKLOAD_02}}:8443\": {},\r\n                        \"https://172.16.0.42\": {}\r\n                    },\r\n                    \"monitors\": {\r\n                        \"https\": {\r\n                            \"default_state\":\"UNKNOWN\",\r\n                            \"interval_seconds\":12,\r\n                            \"consecutive_success_threshold\":4,\r\n                            \"consecutive_failure_threshold\":4,\r\n                            \"request\": {\r\n                                \"method\":\"GET\",\r\n                                \"path\":\"/\",       \r\n                                \"headers\":{},\r\n                                \"body\":\"\"\r\n                            },\r\n                            \"response\": {\r\n                                \"status_codes\":[\"200\"],\r\n                                \"headers\":{},\r\n                                \"body\":\"\",\r\n                                \"timeout_seconds\":10\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps/monitored-application",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps",
								"monitored-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "5) GET monitored-application deployment status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "749a2f19-5067-46ad-8e88-e83052b5d9b4",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps/monitored-application",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps",
								"monitored-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "6) Logout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
								"exec": [
									"pm.test(\"Logout\", function () {",
									"    ",
									"    pm.globals.unset(\"TOKEN\");",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"state\": {\n        \"token\": \"{{TOKEN}}\"\n    }\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/logout",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5) App definition with Security",
			"item": [
				{
					"name": "1) Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
								"exec": [
									"pm.test(\"Authenticate\", function () {\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									" \r",
									"    pm.globals.set(\"TOKEN\", jsonData.state.token);\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"admin\",\n\t\t\"password\": \"{{PASSWORD}}\"\n\t}\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2) Application definition with security block and monitor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4db2c904-3efb-4950-83e9-b911c2e5e22f",
								"exec": [
									"requestBody = JSON.parse(request.data);",
									"Object.keys(requestBody.spec.services).forEach( function(path){",
									"    Object.keys(requestBody.spec.services[path].egress.workloads).forEach(function(workload){",
									"        let w = workload.split('//')[1].split(':')[0];",
									"        if (w.startsWith('{{') && w.endsWith('}}')) {",
									"            let wl = w.substring(2,w.length-2);",
									"            if (/[<>/\\\\${}]/g.test(pm.variables.get(wl)) || pm.variables.get(wl) === undefined || !(pm.variables.get(wl))) {",
									"                throw new Error(\"Egress Workload variable \" + wl + \" contains an invalid character or  is undefined: \" +  pm.variables.get(wl));",
									"            }",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ca32331b-6c90-4ca4-b23c-495594f92a1a",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"spec\": {\r\n        \"display_name\": \"App Three\",\r\n        \"description\": \"Olivia's third secured app\",\r\n        \"services\": {\r\n            \"as-monitor-lamp\": {\r\n                \"ingress\": {\r\n                    \"uris\": {\r\n                        \"http://secure.com:80\": {}\r\n                    }\r\n                },\r\n               \"egress\": {\r\n                    \"load_balancing_method\": \"ROUNDROBIN\",\r\n                    \"tls\": null,\r\n                    \"workloads\": {\r\n                        \"http://{{WORKLOAD_01}}\": {},\r\n                        \"http://{{WORKLOAD_02}}\": {}\r\n                    },\r\n                    \"monitors\": null\r\n                },\r\n                \"security\": {\r\n                    \"technology_stack\": [\r\n                        \"CGI\",\r\n                        \"LINUX\",\r\n                        \"MYSQL\",\r\n                        \"PHP\"\r\n                    ],\r\n                    \"monitor_only\": true\r\n                }\r\n            },\r\n            \"as-block-lamp\": {\r\n                \"ingress\": {\r\n                    \"uris\": {\r\n                        \"http://secure.com:8080\": {}\r\n                    }\r\n                },\r\n                \"egress\": {\r\n                    \"load_balancing_method\": \"ROUNDROBIN\",\r\n                    \"tls\": null,\r\n                    \"workloads\": {\r\n                        \"http://{{WORKLOAD_01}}\": {},\r\n                        \"http://{{WORKLOAD_02}}\": {}\r\n                    },\r\n                    \"monitors\": null\r\n                },\r\n                \"security\": {\r\n                    \"technology_stack\": [\r\n                        \"CGI\",\r\n                        \"LINUX\",\r\n                        \"MYSQL\",\r\n                        \"PHP\"\r\n                    ],\r\n                    \"monitor_only\": false\r\n                }\r\n            },\r\n            \"as-block-python-js\": {\r\n                \"ingress\": {\r\n                    \"uris\": {\r\n                        \"http://secure.com:8081\": {}\r\n                    }\r\n                },\r\n                \"egress\": {\r\n                    \"load_balancing_method\": \"ROUNDROBIN\",\r\n                    \"tls\": null,\r\n                    \"workloads\": {\r\n                        \"http://{{WORKLOAD_01}}\": {},\r\n                        \"http://{{WORKLOAD_02}}\": {}\r\n                    },\r\n                    \"monitors\": null\r\n                },\r\n                \"security\": {\r\n                    \"technology_stack\": [\r\n                    \t\"APACHE_TOMCAT\",\r\n                        \"PYTHON\",\r\n                        \"JAVASCRIPT\"\r\n                    ],\r\n                    \"monitor_only\": false\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps/secure-application",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps",
								"secure-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "3) GET secureapp deployment status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b77e008a-5b43-4024-b7cc-0a2de376929b",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Authenticated\",function(){\r",
									"    switch(responseCode.code) {\r",
									"        case 401:\r",
									"            throw new Error(\"Request did not contain proper authentication token\");\r",
									"        default:\r",
									"            break;\r",
									"    }\r",
									"    \r",
									"});\r",
									"pm.test(\"set BlockAppServiceDNS\", function () {\r",
									"    pm.globals.set(\"BlockAppServiceDNS\", null);\r",
									"    if (jsonData.status !== null && jsonData.status.services[\"as-block-lamp\"]) {\r",
									"        let ip = jsonData.status.services[\"as-block-lamp\"].active.ingress_status.properties.ip;\r",
									"        if (ValidateIPaddress(ip)) {\r",
									"            pm.globals.set(\"BlockAppServiceDNS\", ip);    \r",
									"        }\r",
									"        else {\r",
									"            throw new Error(\"Invalid IP or FQDN returned for path as-block-lamp: \" + ip);\r",
									"        }\r",
									"    } else { throw new Error(\"as-block-lamp Path was not properly defined\");}\r",
									"});\r",
									"\r",
									"pm.test(\"set MonitorAppserviceDNS\", function () {\r",
									"    pm.globals.set(\"MonitorAppserviceDNS\", null);  \r",
									"    if (jsonData.status !== null && jsonData.status.services[\"as-monitor-lamp\"]) {\r",
									"        let ip = jsonData.status.services[\"as-monitor-lamp\"].active.ingress_status.properties.ip;\r",
									"        if (ValidateIPaddress(ip)) {\r",
									"            pm.globals.set(\"MonitorAppserviceDNS\", ip);    \r",
									"        }\r",
									"        else {\r",
									"            throw new Error(\"Invalid IP or FQDN returned for path as-monitor-lamp: \" + ip);\r",
									"        }\r",
									"    } else { throw new Error(\"as-monitor-lamp Path was not properly defined\");}\r",
									"});\r",
									"\r",
									"\r",
									"function ValidateIPaddress(ipaddress) \r",
									"{\r",
									"    if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ipaddress))\r",
									"    {\r",
									"        return (true);\r",
									"    }\r",
									"    return (false);\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8f8de1a4-f06d-454a-a7a3-87316cc9b7ed",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps/secure-application",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps",
								"secure-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "4a) blocked web request for cdm.exe",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "199a7397-2a2e-4568-98d7-6b02e3131dc4",
								"exec": [
									"if (!(pm.globals.get(\"BlockAppServiceDNS\"))) {\r",
									"    throw new Error(\"Endpoint IP not set - rerun step3\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "258794a0-9e71-4858-bee3-2c9f764507b2",
								"exec": [
									"pm.test(\"AppSec_SID\", function () {\r",
									"    let _sid_start = responseBody.indexOf('Your support ID is: ') + 'Your support ID is: '.length\r",
									"    let _sid_end =  responseBody.indexOf('<br>',_sid_start)\r",
									"    pm.globals.set(\"AppSec_SID\", responseBody.substring(_sid_start,_sid_end));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{BlockAppServiceDNS}}:8080/maliciousScript.bat",
							"protocol": "http",
							"host": [
								"{{BlockAppServiceDNS}}"
							],
							"port": "8080",
							"path": [
								"maliciousScript.bat"
							]
						}
					},
					"response": []
				},
				{
					"name": "4b) monitor only web request for maliciousscript.bat",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a4810594-faa5-445c-8c5f-05bc5228dc84",
								"exec": [
									"if (!(pm.globals.get(\"MonitorAppserviceDNS\"))) {\r",
									"    throw new Error(\"Endpoint IP not set - rerun step3\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eb5f463a-a6c3-4acb-a37a-c9dac94a54df",
								"exec": [
									"pm.test(\"AppSec_SID\", function () {\r",
									"    let _sid_start = responseBody.indexOf('Your support ID is: ') + 'Your support ID is: '.length\r",
									"    let _sid_end =  responseBody.indexOf('<br>',_sid_start)\r",
									"    pm.globals.set(\"AppSec_SID\", responseBody.substring(_sid_start,_sid_end));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{MonitorAppserviceDNS}}/maliciousScript.bat",
							"protocol": "http",
							"host": [
								"{{MonitorAppserviceDNS}}"
							],
							"path": [
								"maliciousScript.bat"
							]
						}
					},
					"response": []
				},
				{
					"name": "4c) blocked web request for XSS attack",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "199a7397-2a2e-4568-98d7-6b02e3131dc4",
								"exec": [
									"if (!(pm.globals.get(\"BlockAppServiceDNS\"))) {\r",
									"    throw new Error(\"Endpoint IP not set - rerun step3\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "258794a0-9e71-4858-bee3-2c9f764507b2",
								"exec": [
									"pm.test(\"AppSec_SID\", function () {\r",
									"    let _sid_start = responseBody.indexOf('Your support ID is: ') + 'Your support ID is: '.length\r",
									"    let _sid_end =  responseBody.indexOf('<br>',_sid_start)\r",
									"    pm.globals.set(\"AppSec_SID\", responseBody.substring(_sid_start,_sid_end));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{BlockAppServiceDNS}}:8080/?param=%3e%3cscript%3eeval(%22alert(%27hacked%27)%22)%3c/script",
							"protocol": "http",
							"host": [
								"{{BlockAppServiceDNS}}"
							],
							"port": "8080",
							"path": [
								""
							],
							"query": [
								{
									"key": "param",
									"value": "%3e%3cscript%3eeval(%22alert(%27hacked%27)%22)%3c/script"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4d) blocked web request for XSS <False Positive>",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "199a7397-2a2e-4568-98d7-6b02e3131dc4",
								"exec": [
									"if (!(pm.globals.get(\"BlockAppServiceDNS\"))) {\r",
									"    throw new Error(\"Endpoint IP not set - rerun step3\");\r",
									"}\r",
									"\r",
									"//console.log(myHeader);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "258794a0-9e71-4858-bee3-2c9f764507b2",
								"exec": [
									"pm.test(\"AppSec_SID\", function () {\r",
									"    let _sid_start = responseBody.indexOf('Your support ID is: ') + 'Your support ID is: '.length\r",
									"    let _sid_end =  responseBody.indexOf('<br>',_sid_start)\r",
									"    pm.globals.set(\"AppSec_SID\", responseBody.substring(_sid_start,_sid_end));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://{{BlockAppServiceDNS}}:8080",
							"protocol": "http",
							"host": [
								"{{BlockAppServiceDNS}}"
							],
							"port": "8080"
						}
					},
					"response": []
				},
				{
					"name": "4e) blocked web request for SQL Injection",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "199a7397-2a2e-4568-98d7-6b02e3131dc4",
								"exec": [
									"if (!(pm.globals.get(\"BlockAppServiceDNS\"))) {\r",
									"    throw new Error(\"Endpoint IP not set - rerun step3\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "258794a0-9e71-4858-bee3-2c9f764507b2",
								"exec": [
									"pm.test(\"AppSec_SID\", function () {\r",
									"    let _sid_start = responseBody.indexOf('Your support ID is: ') + 'Your support ID is: '.length\r",
									"    let _sid_end =  responseBody.indexOf('<br>',_sid_start)\r",
									"    pm.globals.set(\"AppSec_SID\", responseBody.substring(_sid_start,_sid_end));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"'999' UNION SELECT Username, Password FROM Users;\",\n\t\"password\": \"test\"\n}"
						},
						"url": {
							"raw": "http://{{BlockAppServiceDNS}}:8080/sql-test",
							"protocol": "http",
							"host": [
								"{{BlockAppServiceDNS}}"
							],
							"port": "8080",
							"path": [
								"sql-test"
							]
						}
					},
					"response": []
				},
				{
					"name": "5) Get Detailed Security Events for specific support_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60a76514-4317-4f2b-b8ba-64efcfd22e73",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c6717583-9209-4a8a-aca4-f3b415cf5327",
								"exec": [
									"if (!(pm.globals.get(\"AppSec_SID\"))) {\r",
									"    throw new Error(\"AppSec_ID variable not populated, please generate AppSec block in section 5\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/view/event?start_time=-1d&end_time=now&dimension_names=outcome&dimension_names=outcome_reason&dimension_names=signature_ids&dimension_names=http_compliance_subviolations&dimension_names=violation_short_names&dimension_names=evasion_subviolations&dimension_names=attack_types&dimension_names=violation_rating&filter=event_name='service_request'+and+app='secure-application'+and+support_id='{{AppSec_SID}}'",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"view",
								"event"
							],
							"query": [
								{
									"key": "start_time",
									"value": "-1d"
								},
								{
									"key": "end_time",
									"value": "now"
								},
								{
									"key": "dimension_names",
									"value": "outcome"
								},
								{
									"key": "dimension_names",
									"value": "outcome_reason"
								},
								{
									"key": "dimension_names",
									"value": "signature_ids"
								},
								{
									"key": "dimension_names",
									"value": "http_compliance_subviolations"
								},
								{
									"key": "dimension_names",
									"value": "violation_short_names"
								},
								{
									"key": "dimension_names",
									"value": "evasion_subviolations"
								},
								{
									"key": "dimension_names",
									"value": "attack_types"
								},
								{
									"key": "dimension_names",
									"value": "violation_rating"
								},
								{
									"key": "filter",
									"value": "event_name='service_request'+and+app='secure-application'+and+support_id='{{AppSec_SID}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "6) Logout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
								"exec": [
									"pm.test(\"Logout\", function () {",
									"    ",
									"    pm.globals.unset(\"TOKEN\");",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"state\": {\n        \"token\": \"{{TOKEN}}\"\n    }\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/logout",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "4e) blocked web request for SQL Injection Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "199a7397-2a2e-4568-98d7-6b02e3131dc4",
								"exec": [
									"if (!(pm.globals.get(\"BlockAppServiceDNS\"))) {\r",
									"    throw new Error(\"Endpoint IP not set - rerun step3\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "258794a0-9e71-4858-bee3-2c9f764507b2",
								"exec": [
									"pm.test(\"AppSec_SID\", function () {\r",
									"    let _sid_start = responseBody.indexOf('Your support ID is: ') + 'Your support ID is: '.length\r",
									"    let _sid_end =  responseBody.indexOf('<br>',_sid_start)\r",
									"    pm.globals.set(\"AppSec_SID\", responseBody.substring(_sid_start,_sid_end));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"'999' UNION SELECT Username, Password FROM Users;\",\n\t\"password\": \"test\"\n}"
						},
						"url": {
							"raw": "http://{{BlockAppServiceDNS}}:8080/sql-test",
							"protocol": "http",
							"host": [
								"{{BlockAppServiceDNS}}"
							],
							"port": "8080",
							"path": [
								"sql-test"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "6) Highly Available App Definition",
			"item": [
				{
					"name": "1) Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
								"exec": [
									"pm.test(\"settoken\", function () {\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									" \r",
									"    pm.globals.set(\"TOKEN\", jsonData.state.token);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"admin\",\n\t\t\"password\": \"{{PASSWORD}}\"\n\t}\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2a) Deploy HA application ha-application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "74e22268-a04e-4d52-8d33-cb33e5e92119",
								"exec": [
									"requestBody = JSON.parse(request.data);",
									"Object.keys(requestBody.spec.services).forEach( function(path){",
									"    Object.keys(requestBody.spec.services[path].egress.workloads).forEach(function(workload){",
									"        let w = workload.split('//')[1].split(':')[0];",
									"        if (w.startsWith('{{') && w.endsWith('}}')) {",
									"            let wl = w.substring(2,w.length-2);",
									"            if (/[<>/\\\\${}]/g.test(pm.variables.get(wl)) || pm.variables.get(wl) === undefined || !(pm.variables.get(wl))) {",
									"                throw new Error(\"Egress Workload variable \" + wl + \" contains an invalid character or  is undefined: \" +  pm.variables.get(wl));",
									"            }",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9d659eec-2b09-4215-93b1-2df3b3516222",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"spec\": {\r\n        \"display_name\": \"App Four\",\r\n        \"description\": \"Olivia's fourth ha app\",\r\n        \"certs\": {\r\n            \"cert-2\": {\r\n                \"pem\": {\r\n                    \"password\": \"\",\r\n                    \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCfeMhtEfhMWrPa\\nZAo64fNYcNg9uJjA+KzNqK9vQ5N/yFjxXEtL4/qVVNLd5aX1w8evk0cYNS3fFT24\\ne3sSilwOD3fWSg3ilDlELaVzgUpU233ONb6ksVvv6Pw2t19UZTVXT1qg+zdksO47\\n9hIP4AiaEKIl3gO3u4m5GOzQtMcGUumOt9IdZF9CK3vrVD7lD5+aF/7pZ792drED\\ncfJFgGX0j97gx1h+fRU5PJthcIx1QIhcYmdeFFycEgVoIaL7hgk07ij5hee6gH49\\n1R/zZp4PvJ119eikzN5Mc9kgtvAp5HBXdGtn1A2hpifMz50xvOeekYdEl2Z24Vyw\\n850mqbR/AgMBAAECggEAdNcY+hjtdHwMRFmByUydb9IWDXq/qLtKWNBb4UiAvGH9\\nELIPlQXvJhRk/yFwLBYKq1BcCZeFCWrVsuH99UKcWczpf374l2cEYjiTfYJgBLZg\\ngYKNMLul4awxhqFp3jrdDyBcBZCqMEMV+aa76xe5FbBULSxySt7D9HMXp36cR7u1\\na9qHOpySa4IciKghW3NIBUEW85iYPIf/VnwdaLvvQrwMkzhvYyfS2q5HGOAs1Ngi\\nvYxv4spWFhh/xX9O0K0c87/hw5eBNgBntduYZC7zGLj3HeQH5NJZawJ1Npwf0xaP\\nofb8qTkKWlpCuiCXTp3VCkBmFvBZDZpSZaXBHKQAaQKBgQDT5l3UkgMs85f11SfW\\nv0hKvx/sDWMtjtZMLy+tQob5P8mpclQUkTYZKFNeJjg6jmzlDiclV5BKOOfoGlOY\\nttUe782mEhwkd125CDWCZa+xpVxMAQNH0P/aNn4BxbdJjMyUlOZOia07RCN4XVtz\\nNxaqLPvpgC1EJMWziiHWS8L7YwKBgQDAqSVsAuE3CnQcVVODTYglYD/OonZE7GLi\\nu+Wm+6m/B9+zuKXeQMhXaDJh6S2jJGI9g5URsdc4wWZnNVwYRM8KLfEBY9TmMPEP\\nvd3wTzev466qJWxTL7E84/JacHjOPF45bkBCeYRSUV9zCIoIAC1mOTUYDuHC1bZ4\\nTL2/cTiDNQKBgB01ojWNMxbdNVNT4Lv/fi2fjvzxE3zSNcQmtQHDK+vr2Rache6X\\n3cc2Adf2mMWpoGUqwEarfV5d3cnm5yMkANjU4ZpE4NA+DBNXiFjDP6bTTpfDg/pA\\nWyRvYotH/+4JlKHerKii3dhPmjwbUmHddChdLxSO8K52CzKmled+ZhBVAoGBAL6T\\nkwzxHE8R7CFK1j2AKDiwqO2CD3PGUVrvexBeyV7KLyLceFcNxh+QVqY7voUurG8l\\nBgRm4vqldOKLCfqHtjXflBNH6YV6zDpCGpRoCDHZCyILusfe2XfeFBIaR6XaWWp+\\nANrA0X+MNtrXi5K2ejIwTLDrp67PMJx3bQs+uCQxAoGAAVIHW3r9R7HNHhbjQjV+\\n4ZEwXycmCtYgRdD4APrOp9T62QT1epi867OEm68ySkTpJZCFYELwKdK16a9EMU5M\\nGmY9zKXVePfPSS+x6krfN4Rz2zlcY32vdME2ZNPCMUOgjXPCxSOhyJ8cFHQobted\\n8agAnCJ36UwdqV5mzwPtVkc=\\n-----END PRIVATE KEY-----\\n\",\r\n                    \"public_cert\": \"-----BEGIN CERTIFICATE-----\\nMIIDjDCCAnQCCQC/hdihUFWIWTANBgkqhkiG9w0BAQsFADCBhzELMAkGA1UEBhMC\\nVVMxEzARBgNVBAgMCldhc2hpbmd0b24xEDAOBgNVBAcMB1NlYXR0bGUxFDASBgNV\\nBAoMC0hlbGxvSGVhbHRoMRcwFQYDVQQDDA5IZWxsb0hlYWx0aC5pbzEiMCAGCSqG\\nSIb3DQEJARYTcm9vdEBIZWxsb0hlYWx0aC5pbzAeFw0xODA4MDQwMTAzMjhaFw0x\\nOTA4MDQwMTAzMjhaMIGHMQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3Rv\\nbjEQMA4GA1UEBwwHU2VhdHRsZTEUMBIGA1UECgwLSGVsbG9IZWFsdGgxFzAVBgNV\\nBAMMDkhlbGxvSGVhbHRoLmlvMSIwIAYJKoZIhvcNAQkBFhNyb290QEhlbGxvSGVh\\nbHRoLmlvMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn3jIbRH4TFqz\\n2mQKOuHzWHDYPbiYwPiszaivb0OTf8hY8VxLS+P6lVTS3eWl9cPHr5NHGDUt3xU9\\nuHt7EopcDg931koN4pQ5RC2lc4FKVNt9zjW+pLFb7+j8NrdfVGU1V09aoPs3ZLDu\\nO/YSD+AImhCiJd4Dt7uJuRjs0LTHBlLpjrfSHWRfQit761Q+5Q+fmhf+6We/dnax\\nA3HyRYBl9I/e4MdYfn0VOTybYXCMdUCIXGJnXhRcnBIFaCGi+4YJNO4o+YXnuoB+\\nPdUf82aeD7yddfXopMzeTHPZILbwKeRwV3RrZ9QNoaYnzM+dMbznnpGHRJdmduFc\\nsPOdJqm0fwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQCHalSX6X8SUkL0QliU/hOW\\noQulgTULr3HcXR55gDErhQPQ/66QIV5uJjUpdRiyYmRikS/h0Zcs3ZzFkZlD31cF\\nqXgYqpvBxCtkXfRwedu+HLzVq7O5pdTRTNtoynJbdo1RXNsaP1sgK5qr806RsWLk\\njW4mmzDPXl6Z1wf2fwa05QHJiQSANzDhOrPSmW5YUZojV5dMDGN8JmlnH3ESdDSc\\n5fPR2f+IoUTet4CmHqdRPb7xyiEbk+krYuYLTENBh1Bn5YEgprV+DgAtQ6cBMOTX\\n1UlfOILhhXpjVar3WOLU6hEOosB2I+oYQxeHNLMrAhtMfmRkJWbGHYeOd2F1Ac1T\\n-----END CERTIFICATE-----\\n\",\r\n                    \"ca_certs\": []\r\n                }\r\n            }\r\n        },\r\n        \"services\": {\r\n            \"ha-path-80\": {\r\n                \"ingress\": {\r\n                    \"uris\": {\r\n                        \"http://ha.com\": {}\r\n                    }\r\n                },\r\n                \"egress\": {\r\n                    \"workloads\": {\r\n                        \"http://{{WORKLOAD_01}}\": {},\r\n                        \"http://{{WORKLOAD_02}}\": {}\r\n                    },\r\n                    \"monitors\": {\r\n                        \"http\": {\r\n                            \"default_state\": \"UNKNOWN\",\r\n                            \"interval_seconds\": 10,\r\n                            \"consecutive_success_threshold\": 2,\r\n                            \"consecutive_failure_threshold\": 2,\r\n                            \"request\": null,\r\n                            \"response\": {\r\n                                \"status_codes\": [],\r\n                                \"headers\": {},\r\n                                \"body\": \"\",\r\n                                \"timeout_seconds\": 3\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"high_availability\": \"ENABLED\"\r\n            },\r\n            \"ha-path-443\": {\r\n                \"ingress\": {\r\n                    \"uris\": {\r\n                        \"https://ha.com\": {\r\n                            \"tls\": {\r\n                                \"cert_id\": \"cert-2\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"egress\": {\r\n                    \"load_balancing_method\": \"ROUNDROBIN\",\r\n                    \"tls\": {\r\n                        \"authentication\": \"NONE\"\r\n                    },\r\n                    \"workloads\": {\r\n                        \"https://{{WORKLOAD_01}}\": {},\r\n                        \"https://{{WORKLOAD_02}}\": {}\r\n                    },\r\n                    \"monitors\": {\r\n                        \"https\": {\r\n                            \"default_state\":\"UNKNOWN\",\r\n                            \"interval_seconds\":12,\r\n                            \"consecutive_success_threshold\":4,\r\n                            \"consecutive_failure_threshold\":4,\r\n                            \"request\": {\r\n                                \"method\":\"GET\",\r\n                                \"path\":\"/\",       \r\n                                \"headers\":{},\r\n                                \"body\":\"\"\r\n                            },\r\n                            \"response\": {\r\n                                \"status_codes\":[\"200\"],\r\n                                \"headers\":{},\r\n                                \"body\":\"\",\r\n                                \"timeout_seconds\":10\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"high_availability\": \"ENABLED\"\r\n            }\r\n        }\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps/ha-application",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps",
								"ha-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "2b) Deploy HA application ha-application WithAppsec",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "74e22268-a04e-4d52-8d33-cb33e5e92119",
								"exec": [
									"requestBody = JSON.parse(request.data);",
									"Object.keys(requestBody.spec.services).forEach( function(path){",
									"    Object.keys(requestBody.spec.services[path].egress.workloads).forEach(function(workload){",
									"        let w = workload.split('//')[1].split(':')[0];",
									"        if (w.startsWith('{{') && w.endsWith('}}')) {",
									"            let wl = w.substring(2,w.length-2);",
									"            if (/[<>/\\\\${}]/g.test(pm.variables.get(wl)) || pm.variables.get(wl) === undefined || !(pm.variables.get(wl))) {",
									"                throw new Error(\"Egress Workload variable \" + wl + \" contains an invalid character or  is undefined: \" +  pm.variables.get(wl));",
									"            }",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9d659eec-2b09-4215-93b1-2df3b3516222",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"spec\": {\r\n        \"display_name\": \"App Four\",\r\n        \"description\": \"Olivia's fourth ha app\",\r\n        \"certs\": {\r\n            \"cert-2\": {\r\n                \"pem\": {\r\n                    \"password\": \"\",\r\n                    \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCfeMhtEfhMWrPa\\nZAo64fNYcNg9uJjA+KzNqK9vQ5N/yFjxXEtL4/qVVNLd5aX1w8evk0cYNS3fFT24\\ne3sSilwOD3fWSg3ilDlELaVzgUpU233ONb6ksVvv6Pw2t19UZTVXT1qg+zdksO47\\n9hIP4AiaEKIl3gO3u4m5GOzQtMcGUumOt9IdZF9CK3vrVD7lD5+aF/7pZ792drED\\ncfJFgGX0j97gx1h+fRU5PJthcIx1QIhcYmdeFFycEgVoIaL7hgk07ij5hee6gH49\\n1R/zZp4PvJ119eikzN5Mc9kgtvAp5HBXdGtn1A2hpifMz50xvOeekYdEl2Z24Vyw\\n850mqbR/AgMBAAECggEAdNcY+hjtdHwMRFmByUydb9IWDXq/qLtKWNBb4UiAvGH9\\nELIPlQXvJhRk/yFwLBYKq1BcCZeFCWrVsuH99UKcWczpf374l2cEYjiTfYJgBLZg\\ngYKNMLul4awxhqFp3jrdDyBcBZCqMEMV+aa76xe5FbBULSxySt7D9HMXp36cR7u1\\na9qHOpySa4IciKghW3NIBUEW85iYPIf/VnwdaLvvQrwMkzhvYyfS2q5HGOAs1Ngi\\nvYxv4spWFhh/xX9O0K0c87/hw5eBNgBntduYZC7zGLj3HeQH5NJZawJ1Npwf0xaP\\nofb8qTkKWlpCuiCXTp3VCkBmFvBZDZpSZaXBHKQAaQKBgQDT5l3UkgMs85f11SfW\\nv0hKvx/sDWMtjtZMLy+tQob5P8mpclQUkTYZKFNeJjg6jmzlDiclV5BKOOfoGlOY\\nttUe782mEhwkd125CDWCZa+xpVxMAQNH0P/aNn4BxbdJjMyUlOZOia07RCN4XVtz\\nNxaqLPvpgC1EJMWziiHWS8L7YwKBgQDAqSVsAuE3CnQcVVODTYglYD/OonZE7GLi\\nu+Wm+6m/B9+zuKXeQMhXaDJh6S2jJGI9g5URsdc4wWZnNVwYRM8KLfEBY9TmMPEP\\nvd3wTzev466qJWxTL7E84/JacHjOPF45bkBCeYRSUV9zCIoIAC1mOTUYDuHC1bZ4\\nTL2/cTiDNQKBgB01ojWNMxbdNVNT4Lv/fi2fjvzxE3zSNcQmtQHDK+vr2Rache6X\\n3cc2Adf2mMWpoGUqwEarfV5d3cnm5yMkANjU4ZpE4NA+DBNXiFjDP6bTTpfDg/pA\\nWyRvYotH/+4JlKHerKii3dhPmjwbUmHddChdLxSO8K52CzKmled+ZhBVAoGBAL6T\\nkwzxHE8R7CFK1j2AKDiwqO2CD3PGUVrvexBeyV7KLyLceFcNxh+QVqY7voUurG8l\\nBgRm4vqldOKLCfqHtjXflBNH6YV6zDpCGpRoCDHZCyILusfe2XfeFBIaR6XaWWp+\\nANrA0X+MNtrXi5K2ejIwTLDrp67PMJx3bQs+uCQxAoGAAVIHW3r9R7HNHhbjQjV+\\n4ZEwXycmCtYgRdD4APrOp9T62QT1epi867OEm68ySkTpJZCFYELwKdK16a9EMU5M\\nGmY9zKXVePfPSS+x6krfN4Rz2zlcY32vdME2ZNPCMUOgjXPCxSOhyJ8cFHQobted\\n8agAnCJ36UwdqV5mzwPtVkc=\\n-----END PRIVATE KEY-----\\n\",\r\n                    \"public_cert\": \"-----BEGIN CERTIFICATE-----\\nMIIDjDCCAnQCCQC/hdihUFWIWTANBgkqhkiG9w0BAQsFADCBhzELMAkGA1UEBhMC\\nVVMxEzARBgNVBAgMCldhc2hpbmd0b24xEDAOBgNVBAcMB1NlYXR0bGUxFDASBgNV\\nBAoMC0hlbGxvSGVhbHRoMRcwFQYDVQQDDA5IZWxsb0hlYWx0aC5pbzEiMCAGCSqG\\nSIb3DQEJARYTcm9vdEBIZWxsb0hlYWx0aC5pbzAeFw0xODA4MDQwMTAzMjhaFw0x\\nOTA4MDQwMTAzMjhaMIGHMQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3Rv\\nbjEQMA4GA1UEBwwHU2VhdHRsZTEUMBIGA1UECgwLSGVsbG9IZWFsdGgxFzAVBgNV\\nBAMMDkhlbGxvSGVhbHRoLmlvMSIwIAYJKoZIhvcNAQkBFhNyb290QEhlbGxvSGVh\\nbHRoLmlvMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn3jIbRH4TFqz\\n2mQKOuHzWHDYPbiYwPiszaivb0OTf8hY8VxLS+P6lVTS3eWl9cPHr5NHGDUt3xU9\\nuHt7EopcDg931koN4pQ5RC2lc4FKVNt9zjW+pLFb7+j8NrdfVGU1V09aoPs3ZLDu\\nO/YSD+AImhCiJd4Dt7uJuRjs0LTHBlLpjrfSHWRfQit761Q+5Q+fmhf+6We/dnax\\nA3HyRYBl9I/e4MdYfn0VOTybYXCMdUCIXGJnXhRcnBIFaCGi+4YJNO4o+YXnuoB+\\nPdUf82aeD7yddfXopMzeTHPZILbwKeRwV3RrZ9QNoaYnzM+dMbznnpGHRJdmduFc\\nsPOdJqm0fwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQCHalSX6X8SUkL0QliU/hOW\\noQulgTULr3HcXR55gDErhQPQ/66QIV5uJjUpdRiyYmRikS/h0Zcs3ZzFkZlD31cF\\nqXgYqpvBxCtkXfRwedu+HLzVq7O5pdTRTNtoynJbdo1RXNsaP1sgK5qr806RsWLk\\njW4mmzDPXl6Z1wf2fwa05QHJiQSANzDhOrPSmW5YUZojV5dMDGN8JmlnH3ESdDSc\\n5fPR2f+IoUTet4CmHqdRPb7xyiEbk+krYuYLTENBh1Bn5YEgprV+DgAtQ6cBMOTX\\n1UlfOILhhXpjVar3WOLU6hEOosB2I+oYQxeHNLMrAhtMfmRkJWbGHYeOd2F1Ac1T\\n-----END CERTIFICATE-----\\n\",\r\n                    \"ca_certs\": []\r\n                }\r\n            }\r\n        },\r\n        \"services\": {\r\n            \"ha-path-80\": {\r\n                \"ingress\": {\r\n                    \"uris\": {\r\n                        \"http://ha.com\": {}\r\n                    }\r\n                },\r\n                \"egress\": {\r\n                    \"workloads\": {\r\n                        \"http://{{WORKLOAD_01}}\": {},\r\n                        \"http://{{WORKLOAD_02}}\": {}\r\n                    },\r\n                    \"monitors\": {\r\n                        \"http\": {\r\n                            \"default_state\": \"UNKNOWN\",\r\n                            \"interval_seconds\": 10,\r\n                            \"consecutive_success_threshold\": 2,\r\n                            \"consecutive_failure_threshold\": 2,\r\n                            \"request\": null,\r\n                            \"response\": {\r\n                                \"status_codes\": [],\r\n                                \"headers\": {},\r\n                                \"body\": \"\",\r\n                                \"timeout_seconds\": 3\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"high_availability\": {\"state\": \"ENABLED\" }\r\n            },\r\n            \"ha-path-443\": {\r\n                \"ingress\": {\r\n                    \"uris\": {\r\n                        \"https://ha.com\": {\r\n                            \"tls\": {\r\n                                \"cert_id\": \"cert-2\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"egress\": {\r\n                    \"load_balancing_method\": \"ROUNDROBIN\",\r\n                    \"tls\": {\r\n                        \"authentication\": \"NONE\"\r\n                    },\r\n                    \"workloads\": {\r\n                        \"https://{{WORKLOAD_01}}\": {},\r\n                        \"https://{{WORKLOAD_02}}\": {}\r\n                    },\r\n                    \"monitors\": {\r\n                        \"https\": {\r\n                            \"default_state\":\"UNKNOWN\",\r\n                            \"interval_seconds\":12,\r\n                            \"consecutive_success_threshold\":4,\r\n                            \"consecutive_failure_threshold\":4,\r\n                            \"request\": {\r\n                                \"method\":\"GET\",\r\n                                \"path\":\"/\",       \r\n                                \"headers\":{},\r\n                                \"body\":\"\"\r\n                            },\r\n                            \"response\": {\r\n                                \"status_codes\":[\"200\"],\r\n                                \"headers\":{},\r\n                                \"body\":\"\",\r\n                                \"timeout_seconds\":10\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"high_availability\": {\"state\": \"ENABLED\" }\r\n            },\r\n            \"ha-8443-path\": {\r\n                \"ingress\": {\r\n                    \"uris\": {\r\n                        \"https://ha.com:8443\": {\r\n                            \"tls\": {\r\n                                \"cert_id\": \"cert-2\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"egress\": {\r\n                    \"load_balancing_method\": \"ROUNDROBIN\",\r\n                    \"tls\": {\r\n                        \"authentication\": \"NONE\"\r\n                    },\r\n                    \"workloads\": {\r\n                        \"https://{{WORKLOAD_01}}:8443\": {},\r\n                        \"https://{{WORKLOAD_02}}:8443\": {}\r\n                    },\r\n                    \"monitors\": {\r\n                        \"https\": {\r\n                            \"default_state\":\"UNKNOWN\",\r\n                            \"interval_seconds\":12,\r\n                            \"consecutive_success_threshold\":4,\r\n                            \"consecutive_failure_threshold\":4,\r\n                            \"request\": {\r\n                                \"method\":\"GET\",\r\n                                \"path\":\"/\",       \r\n                                \"headers\":{},\r\n                                \"body\":\"\"\r\n                            },\r\n                            \"response\": {\r\n                                \"status_codes\":[\"200\"],\r\n                                \"headers\":{},\r\n                                \"body\":\"\",\r\n                                \"timeout_seconds\":10\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"security\": {\r\n                    \"application_stack\": [\r\n                        \"CGI\",\r\n                        \"LINUX\",\r\n                        \"MYSQL\",\r\n                        \"PHP\"\r\n                    ],\r\n                    \"monitor_only\": false\r\n                },\r\n                \"high_availability\": {\"state\": \"ENABLED\" }\r\n            }\r\n        }\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps/ha-application",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps",
								"ha-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "3) GET ha-application deployment status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96a2e11c-e9c5-4f31-9e67-0751c307119b",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps/ha-application",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps",
								"ha-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "4) Logout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
								"exec": [
									"pm.test(\"Logout\", function () {",
									"    ",
									"    pm.globals.unset(\"TOKEN\");",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"state\": {\n        \"token\": \"{{TOKEN}}\"\n    }\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/logout",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "7) Investigate Blue through Events, Health, and Measures",
			"item": [
				{
					"name": "1)  Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
								"exec": [
									"pm.test(\"Authenticate\", function () {\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									" \r",
									"    pm.globals.set(\"TOKEN\", jsonData.state.token);\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"admin\",\n\t\t\"password\": \"{{PASSWORD}}\"\n\t}\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a09d8491-74ba-43f4-8158-5aa7248ea57d",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Certificates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e8400be-7bc2-46f2-bdca-29e278e374d4",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/certs",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"certs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get available Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cbe5b83a-1955-486c-82b6-81dc38fdca05",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/catalog/events",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"catalog",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get available Events for type node_provision",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cbe5b83a-1955-486c-82b6-81dc38fdca05",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/catalog/events/node_provision",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"catalog",
								"events",
								"node_provision"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get available Measures",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2fa25aa0-640d-4509-b57b-369a46dc47e6",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/catalog/measures",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"catalog",
								"measures"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get available Measures for type bytes_in",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2fa25aa0-640d-4509-b57b-369a46dc47e6",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/catalog/measures/bytes_in",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"catalog",
								"measures",
								"bytes_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get available Dimensions of Events and Measures",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0a031ce-fac8-446a-9f64-bc5d2fc1978c",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/catalog/dimensions",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"catalog",
								"dimensions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get available Dimensions of Events and Measures for type app",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0a031ce-fac8-446a-9f64-bc5d2fc1978c",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/catalog/dimensions/app",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"catalog",
								"dimensions",
								"app"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Events for example-application with default Dimensions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ea15152-e5f4-41d9-a524-b1e1ea5e5edd",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/view/event?start_time=-1d&end_time=now&filter=app='example-application'",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"view",
								"event"
							],
							"query": [
								{
									"key": "start_time",
									"value": "-1d"
								},
								{
									"key": "end_time",
									"value": "now"
								},
								{
									"key": "filter",
									"value": "app='example-application'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Events with specific Dimensions for example-application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60a76514-4317-4f2b-b8ba-64efcfd22e73",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/view/event?dimension_names=app&dimension_names=node&dimension_names=path&start_time=-1d&end_time=now&filter=app='example-application'",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"view",
								"event"
							],
							"query": [
								{
									"key": "dimension_names",
									"value": "app"
								},
								{
									"key": "dimension_names",
									"value": "node"
								},
								{
									"key": "dimension_names",
									"value": "path"
								},
								{
									"key": "start_time",
									"value": "-1d"
								},
								{
									"key": "end_time",
									"value": "now"
								},
								{
									"key": "filter",
									"value": "app='example-application'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Measures for example-application with default Dimensions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ff04e45-dab6-4960-9b88-3d330da1904e",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/view/measure?start_time=now-15m@m&end_time=now@m&resolution=30&filter=app='example-application'&measure_names=bytes_in&measure_names=bytes_out&measure_names=requests_http",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"view",
								"measure"
							],
							"query": [
								{
									"key": "start_time",
									"value": "now-15m@m"
								},
								{
									"key": "end_time",
									"value": "now@m"
								},
								{
									"key": "resolution",
									"value": "30"
								},
								{
									"key": "filter",
									"value": "app='example-application'"
								},
								{
									"key": "measure_names",
									"value": "bytes_in"
								},
								{
									"key": "measure_names",
									"value": "bytes_out"
								},
								{
									"key": "measure_names",
									"value": "requests_http"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Measures for example-application with specific Dimensions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c8adc79-a0b3-4269-9532-85ba4dc9aebf",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/view/measure?start_time=now-15m@m&end_time=now@m&resolution=30&dimension_names=app&dimension_names=service&filter=app='example-application'&measure_names=bytes_in&measure_names=bytes_out&measure_names=requests_http",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"view",
								"measure"
							],
							"query": [
								{
									"key": "start_time",
									"value": "now-15m@m"
								},
								{
									"key": "end_time",
									"value": "now@m"
								},
								{
									"key": "resolution",
									"value": "30"
								},
								{
									"key": "dimension_names",
									"value": "app"
								},
								{
									"key": "dimension_names",
									"value": "service"
								},
								{
									"key": "filter",
									"value": "app='example-application'"
								},
								{
									"key": "measure_names",
									"value": "bytes_in"
								},
								{
									"key": "measure_names",
									"value": "bytes_out"
								},
								{
									"key": "measure_names",
									"value": "requests_http"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Measures for example-application narrowing to one workload",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa5f47af-a570-4c9b-8688-49756e166b7f",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/view/measure?start_time=now-15m@m&end_time=now@m&resolution=30&measure_names=bytes_in&dimension_names=app&dimension_names=path&dimension_names=workload_ip&dimension_names=workload_port&filter=app='example-application' and workload_ip='{{WORKLOAD_01}}'",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"view",
								"measure"
							],
							"query": [
								{
									"key": "start_time",
									"value": "now-15m@m"
								},
								{
									"key": "end_time",
									"value": "now@m"
								},
								{
									"key": "resolution",
									"value": "30"
								},
								{
									"key": "measure_names",
									"value": "bytes_in"
								},
								{
									"key": "dimension_names",
									"value": "app"
								},
								{
									"key": "dimension_names",
									"value": "path"
								},
								{
									"key": "dimension_names",
									"value": "workload_ip"
								},
								{
									"key": "dimension_names",
									"value": "workload_port"
								},
								{
									"key": "filter",
									"value": "app='example-application' and workload_ip='{{WORKLOAD_01}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get connections for example-application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa5f47af-a570-4c9b-8688-49756e166b7f",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/view/measure?start_time=now-15m@m&end_time=now@m&resolution=30&measure_names=connections&dimension_names=app&dimension_names=service&dimension_names=workload_ip&dimension_names=workload_port&filter=app='example-application'+and+workload_ip='{{WORKLOAD_01}}'",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"view",
								"measure"
							],
							"query": [
								{
									"key": "start_time",
									"value": "now-15m@m"
								},
								{
									"key": "end_time",
									"value": "now@m"
								},
								{
									"key": "resolution",
									"value": "30"
								},
								{
									"key": "measure_names",
									"value": "connections"
								},
								{
									"key": "dimension_names",
									"value": "app"
								},
								{
									"key": "dimension_names",
									"value": "service"
								},
								{
									"key": "dimension_names",
									"value": "workload_ip"
								},
								{
									"key": "dimension_names",
									"value": "workload_port"
								},
								{
									"key": "filter",
									"value": "app='example-application'+and+workload_ip='{{WORKLOAD_01}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Security Measures for secureapp - blocked http requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8c938ae-2c34-4e35-90a4-329546527a4f",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/view/measure?start_time=-1h&end_time=now&resolution=60&measure_names=requests_http&dimension_names=app&dimension_names=service&dimension_names=outcome&filter=app='secure-application'+and+outcome='blocked'",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"view",
								"measure"
							],
							"query": [
								{
									"key": "start_time",
									"value": "-1h"
								},
								{
									"key": "end_time",
									"value": "now"
								},
								{
									"key": "resolution",
									"value": "60"
								},
								{
									"key": "measure_names",
									"value": "requests_http"
								},
								{
									"key": "dimension_names",
									"value": "app"
								},
								{
									"key": "dimension_names",
									"value": "service"
								},
								{
									"key": "dimension_names",
									"value": "outcome"
								},
								{
									"key": "filter",
									"value": "app='secure-application'+and+outcome='blocked'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Security Measures for secureapp - blocked bytes in",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a014da4b-2762-4b32-a9b8-a58b6a5ba444",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/view/measure?start_time=-1h&end_time=now&resolution=60&measure_names=bytes_in&dimension_names=app&dimension_names=service&filter=app='secure-application'+and+outcome='blocked'",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"view",
								"measure"
							],
							"query": [
								{
									"key": "start_time",
									"value": "-1h"
								},
								{
									"key": "end_time",
									"value": "now"
								},
								{
									"key": "resolution",
									"value": "60"
								},
								{
									"key": "measure_names",
									"value": "bytes_in"
								},
								{
									"key": "dimension_names",
									"value": "app"
								},
								{
									"key": "dimension_names",
									"value": "service"
								},
								{
									"key": "filter",
									"value": "app='secure-application'+and+outcome='blocked'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Security Measures for secureapp - allowed http requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46e9e401-8407-4417-b3b3-165af5245627",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/view/measure?start_time=-1h&end_time=now&resolution=60&measure_names=requests_http&measure_names=requests_http&dimension_names=app&dimension_names=service&filter=app='secure-application'+and+outcome='allowed'",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"view",
								"measure"
							],
							"query": [
								{
									"key": "start_time",
									"value": "-1h"
								},
								{
									"key": "end_time",
									"value": "now"
								},
								{
									"key": "resolution",
									"value": "60"
								},
								{
									"key": "measure_names",
									"value": "requests_http"
								},
								{
									"key": "measure_names",
									"value": "requests_http"
								},
								{
									"key": "dimension_names",
									"value": "app"
								},
								{
									"key": "dimension_names",
									"value": "service"
								},
								{
									"key": "filter",
									"value": "app='secure-application'+and+outcome='allowed'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Security Measures for secureapp - allowed bytes in",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa5a3a2b-5d33-468d-bd8c-7b05c67744fc",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/view/measure?start_time=-1h&end_time=now&resolution=60&measure_names=bytes_in&dimension_names=app&dimension_names=service&filter=app='secure-application'+and+outcome='allowed'",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"view",
								"measure"
							],
							"query": [
								{
									"key": "start_time",
									"value": "-1h"
								},
								{
									"key": "end_time",
									"value": "now"
								},
								{
									"key": "resolution",
									"value": "60"
								},
								{
									"key": "measure_names",
									"value": "bytes_in"
								},
								{
									"key": "dimension_names",
									"value": "app"
								},
								{
									"key": "dimension_names",
									"value": "service"
								},
								{
									"key": "filter",
									"value": "app='secure-application'+and+outcome='allowed'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Security Events and signature_ids for secureapp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60a76514-4317-4f2b-b8ba-64efcfd22e73",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/view/event?start_time=-1h&end_time=now&dimension_names=outcome&dimension_names=outcome_reason&dimension_names=signature_ids&filter=event_name='service_request'+and+app='secure-application'",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"view",
								"event"
							],
							"query": [
								{
									"key": "start_time",
									"value": "-1h"
								},
								{
									"key": "end_time",
									"value": "now"
								},
								{
									"key": "dimension_names",
									"value": "outcome"
								},
								{
									"key": "dimension_names",
									"value": "outcome_reason"
								},
								{
									"key": "dimension_names",
									"value": "signature_ids"
								},
								{
									"key": "filter",
									"value": "event_name='service_request'+and+app='secure-application'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Detailed Security Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60a76514-4317-4f2b-b8ba-64efcfd22e73",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/view/event?start_time=-1h&end_time=now&dimension_names=outcome&dimension_names=outcome_reason&dimension_names=signature_ids&dimension_names=http_compliance_subviolations&dimension_names=violation_short_names&dimension_names=evasion_subviolations&dimension_names=attack_types&dimension_names=violation_rating&dimension_names=support_id&filter=event_name='service_request'+and+app='secure-application'",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"view",
								"event"
							],
							"query": [
								{
									"key": "start_time",
									"value": "-1h"
								},
								{
									"key": "end_time",
									"value": "now"
								},
								{
									"key": "dimension_names",
									"value": "outcome"
								},
								{
									"key": "dimension_names",
									"value": "outcome_reason"
								},
								{
									"key": "dimension_names",
									"value": "signature_ids"
								},
								{
									"key": "dimension_names",
									"value": "http_compliance_subviolations"
								},
								{
									"key": "dimension_names",
									"value": "violation_short_names"
								},
								{
									"key": "dimension_names",
									"value": "evasion_subviolations"
								},
								{
									"key": "dimension_names",
									"value": "attack_types"
								},
								{
									"key": "dimension_names",
									"value": "violation_rating"
								},
								{
									"key": "dimension_names",
									"value": "support_id"
								},
								{
									"key": "filter",
									"value": "event_name='service_request'+and+app='secure-application'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Security Events for secureapp count by country",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60a76514-4317-4f2b-b8ba-64efcfd22e73",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/view/event?start_time=-1h&end_time=now&dimension_names=outcome&dimension_names=outcome_reason&dimension_names=country_code&filter=event_name='service_request'+and+app='secure-application'",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"view",
								"event"
							],
							"query": [
								{
									"key": "start_time",
									"value": "-1h"
								},
								{
									"key": "end_time",
									"value": "now"
								},
								{
									"key": "dimension_names",
									"value": "outcome"
								},
								{
									"key": "dimension_names",
									"value": "outcome_reason"
								},
								{
									"key": "dimension_names",
									"value": "country_code"
								},
								{
									"key": "filter",
									"value": "event_name='service_request'+and+app='secure-application'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Detailed Security Events for specific support_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60a76514-4317-4f2b-b8ba-64efcfd22e73",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c6717583-9209-4a8a-aca4-f3b415cf5327",
								"exec": [
									"if (!(pm.globals.get(\"AppSec_SID\"))) {\r",
									"    throw new Error(\"AppSec_ID variable not populated, please generate AppSec block in section 5\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/view/event?start_time=-1d&end_time=now&dimension_names=outcome&dimension_names=outcome_reason&dimension_names=signature_ids&dimension_names=http_compliance_subviolations&dimension_names=violation_short_names&dimension_names=evasion_subviolations&dimension_names=attack_types&dimension_names=violation_rating&filter=event_name='service_request'+and+app='secure-application'+and+support_id='{{AppSec_SID}}'",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"view",
								"event"
							],
							"query": [
								{
									"key": "start_time",
									"value": "-1d"
								},
								{
									"key": "end_time",
									"value": "now"
								},
								{
									"key": "dimension_names",
									"value": "outcome"
								},
								{
									"key": "dimension_names",
									"value": "outcome_reason"
								},
								{
									"key": "dimension_names",
									"value": "signature_ids"
								},
								{
									"key": "dimension_names",
									"value": "http_compliance_subviolations"
								},
								{
									"key": "dimension_names",
									"value": "violation_short_names"
								},
								{
									"key": "dimension_names",
									"value": "evasion_subviolations"
								},
								{
									"key": "dimension_names",
									"value": "attack_types"
								},
								{
									"key": "dimension_names",
									"value": "violation_rating"
								},
								{
									"key": "filter",
									"value": "event_name='service_request'+and+app='secure-application'+and+support_id='{{AppSec_SID}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Platform information",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cdd8eb8b-ec6d-4bb2-aa6d-96d7eb948b96",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/lifecycle",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"lifecycle"
							]
						}
					},
					"response": [
						{
							"name": "Lifecycle",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/v1beta1/lifecycle",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"v1beta1",
										"lifecycle"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "grpc-metadata-content-type",
									"value": "application/grpc"
								},
								{
									"key": "date",
									"value": "Fri, 12 Oct 2018 01:00:05 GMT"
								},
								{
									"key": "content-length",
									"value": "458"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "103"
								},
								{
									"key": "server",
									"value": "envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"metadata\": {\n        \"name\": \"lifecycle\",\n        \"namespace\": \"api/platform/v1beta1\",\n        \"kind\": \"f5.ext.platform.lifecycle\",\n        \"uid\": \"d376a412-cdb1-11e8-bbe6-060757e5a46a\",\n        \"create_time\": \"2018-10-12T00:00:27Z\",\n        \"update_time\": null\n    },\n    \"spec\": {\n        \"intent\": \"PROVISION\"\n    },\n    \"status\": {\n        \"phase\": \"PROVISIONED\",\n        \"health\": {\n            \"index\": 0,\n            \"reason\": \"Platform is unhealthy\",\n            \"elements\": [\n                {\n                    \"element_name\": \"analytics\",\n                    \"index\": 0,\n                    \"reason\": \"Platform health is unavailable when Analytics services are not responsive\"\n                }\n            ]\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "GET Platform node information",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "877223b0-d500-4476-936f-3733d31ab00a",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/nodes",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"nodes"
							]
						}
					},
					"response": [
						{
							"name": "Lifecycle",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/v1beta1/lifecycle",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"v1beta1",
										"lifecycle"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "grpc-metadata-content-type",
									"value": "application/grpc"
								},
								{
									"key": "date",
									"value": "Fri, 12 Oct 2018 01:00:05 GMT"
								},
								{
									"key": "content-length",
									"value": "458"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "103"
								},
								{
									"key": "server",
									"value": "envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"metadata\": {\n        \"name\": \"lifecycle\",\n        \"namespace\": \"api/platform/v1beta1\",\n        \"kind\": \"f5.ext.platform.lifecycle\",\n        \"uid\": \"d376a412-cdb1-11e8-bbe6-060757e5a46a\",\n        \"create_time\": \"2018-10-12T00:00:27Z\",\n        \"update_time\": null\n    },\n    \"spec\": {\n        \"intent\": \"PROVISION\"\n    },\n    \"status\": {\n        \"phase\": \"PROVISIONED\",\n        \"health\": {\n            \"index\": 0,\n            \"reason\": \"Platform is unhealthy\",\n            \"elements\": [\n                {\n                    \"element_name\": \"analytics\",\n                    \"index\": 0,\n                    \"reason\": \"Platform health is unavailable when Analytics services are not responsive\"\n                }\n            ]\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Get Measures for container for all traffic nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa5f47af-a570-4c9b-8688-49756e166b7f",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/view/measure?start_time=now-15m@m&end_time=now@m&resolution=30&dimension_names=node&dimension_names=node_type&dimension_names=pod_name&dimension_names=pod_namespace&dimension_names=container_name&measure_names=container_network_bytes_in&measure_names=container_network_bytes_out&measure_names=container_cpu_used_percent&measure_names=container_memory_free_percent&filter=node_type='traffic'",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"view",
								"measure"
							],
							"query": [
								{
									"key": "start_time",
									"value": "now-15m@m"
								},
								{
									"key": "end_time",
									"value": "now@m"
								},
								{
									"key": "resolution",
									"value": "30"
								},
								{
									"key": "dimension_names",
									"value": "node"
								},
								{
									"key": "dimension_names",
									"value": "node_type"
								},
								{
									"key": "dimension_names",
									"value": "pod_name"
								},
								{
									"key": "dimension_names",
									"value": "pod_namespace"
								},
								{
									"key": "dimension_names",
									"value": "container_name"
								},
								{
									"key": "measure_names",
									"value": "container_network_bytes_in"
								},
								{
									"key": "measure_names",
									"value": "container_network_bytes_out"
								},
								{
									"key": "measure_names",
									"value": "container_cpu_used_percent"
								},
								{
									"key": "measure_names",
									"value": "container_memory_free_percent"
								},
								{
									"key": "filter",
									"value": "node_type='traffic'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Measures for example-application narrowing to one workload Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa5f47af-a570-4c9b-8688-49756e166b7f",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/view/measure?start_time=now-15m@m&end_time=now@m&resolution=30&measure_names=bytes_in&dimension_names=app&dimension_names=service&dimension_names=workload_ip&dimension_names=workload_port&filter=app='example-application'+and+workload_ip='{{WORKLOAD_01}}'",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"view",
								"measure"
							],
							"query": [
								{
									"key": "start_time",
									"value": "now-15m@m"
								},
								{
									"key": "end_time",
									"value": "now@m"
								},
								{
									"key": "resolution",
									"value": "30"
								},
								{
									"key": "measure_names",
									"value": "bytes_in"
								},
								{
									"key": "dimension_names",
									"value": "app"
								},
								{
									"key": "dimension_names",
									"value": "service"
								},
								{
									"key": "dimension_names",
									"value": "workload_ip"
								},
								{
									"key": "dimension_names",
									"value": "workload_port"
								},
								{
									"key": "filter",
									"value": "app='example-application'+and+workload_ip='{{WORKLOAD_01}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2) Logout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
								"exec": [
									"pm.test(\"Logout\", function () {",
									"    ",
									"    pm.globals.unset(\"TOKEN\");",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"state\": {\n        \"token\": \"{{TOKEN}}\"\n    }\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/logout",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Security Measures for secureapp - allowed and blocked http requests using AND",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46e9e401-8407-4417-b3b3-165af5245627",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/view/measure?start_time=-1h&end_time=now&resolution=60&measure_names=requests_http&dimension_names=app&dimension_names=service&dimension_names=outcome&filter=app%3D'secure-application'%20AND%20(outcome%3D'blocked'%20OR%20outcome%3D'allowed')",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"view",
								"measure"
							],
							"query": [
								{
									"key": "start_time",
									"value": "-1h"
								},
								{
									"key": "end_time",
									"value": "now"
								},
								{
									"key": "resolution",
									"value": "60"
								},
								{
									"key": "measure_names",
									"value": "requests_http"
								},
								{
									"key": "dimension_names",
									"value": "app"
								},
								{
									"key": "dimension_names",
									"value": "service"
								},
								{
									"key": "dimension_names",
									"value": "outcome"
								},
								{
									"key": "filter",
									"value": "app%3D'secure-application'%20AND%20(outcome%3D'blocked'%20OR%20outcome%3D'allowed')"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Security Measures for secureapp - allowed and blocked http requests using AND",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46e9e401-8407-4417-b3b3-165af5245627",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/analytics/{{ANALYTICS_VERSION}}/view/measure?start_time=-1h&end_time=now&resolution=60&measure_names=requests_http&dimension_names=app&dimension_names=service&dimension_names=outcome&filter=app%3D'secure-application'%20AND%20(outcome%3D'blocked'%20OR%20outcome%3D'allowed')",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"analytics",
								"{{ANALYTICS_VERSION}}",
								"view",
								"measure"
							],
							"query": [
								{
									"key": "start_time",
									"value": "-1h"
								},
								{
									"key": "end_time",
									"value": "now"
								},
								{
									"key": "resolution",
									"value": "60"
								},
								{
									"key": "measure_names",
									"value": "requests_http"
								},
								{
									"key": "dimension_names",
									"value": "app"
								},
								{
									"key": "dimension_names",
									"value": "service"
								},
								{
									"key": "dimension_names",
									"value": "outcome"
								},
								{
									"key": "filter",
									"value": "app%3D'secure-application'%20AND%20(outcome%3D'blocked'%20OR%20outcome%3D'allowed')"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "8) vCenter specific settings",
			"item": [
				{
					"name": "1)  Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
								"exec": [
									"pm.test(\"Authenticate\", function () {\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									" \r",
									"    pm.globals.set(\"TOKEN\", jsonData.state.token);\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"admin\",\n\t\t\"password\": \"{{PASSWORD}}\"\n\t}\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2) GET Blue IPPool for vCenter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6657ebba-1865-4297-bdc1-5dec26e9c593",
								"exec": [
									"pm.test(\"setpoolresid\", function () {\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									" \r",
									"    pm.globals.set(\"POOL_RESOURCE_ID\", jsonData.items[0].resource_id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/ipam/pools",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"ipam",
								"pools"
							]
						}
					},
					"response": [
						{
							"name": "Lifecycle",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/v1beta1/lifecycle",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"v1beta1",
										"lifecycle"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "grpc-metadata-content-type",
									"value": "application/grpc"
								},
								{
									"key": "date",
									"value": "Fri, 12 Oct 2018 01:00:05 GMT"
								},
								{
									"key": "content-length",
									"value": "458"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "103"
								},
								{
									"key": "server",
									"value": "envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"metadata\": {\n        \"name\": \"lifecycle\",\n        \"namespace\": \"api/platform/v1beta1\",\n        \"kind\": \"f5.ext.platform.lifecycle\",\n        \"uid\": \"d376a412-cdb1-11e8-bbe6-060757e5a46a\",\n        \"create_time\": \"2018-10-12T00:00:27Z\",\n        \"update_time\": null\n    },\n    \"spec\": {\n        \"intent\": \"PROVISION\"\n    },\n    \"status\": {\n        \"phase\": \"PROVISIONED\",\n        \"health\": {\n            \"index\": 0,\n            \"reason\": \"Platform is unhealthy\",\n            \"elements\": [\n                {\n                    \"element_name\": \"analytics\",\n                    \"index\": 0,\n                    \"reason\": \"Platform health is unavailable when Analytics services are not responsive\"\n                }\n            ]\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "3) Expand Blue IPPool with additional addresses",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"address_range\": \"10.144.173.30#0\"\r\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/ipam/pools/{{POOL_RESOURCE_ID}}",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"ipam",
								"pools",
								"{{POOL_RESOURCE_ID}}"
							]
						}
					},
					"response": [
						{
							"name": "Lifecycle",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/v1beta1/lifecycle",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"v1beta1",
										"lifecycle"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "grpc-metadata-content-type",
									"value": "application/grpc"
								},
								{
									"key": "date",
									"value": "Fri, 12 Oct 2018 01:00:05 GMT"
								},
								{
									"key": "content-length",
									"value": "458"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "103"
								},
								{
									"key": "server",
									"value": "envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"metadata\": {\n        \"name\": \"lifecycle\",\n        \"namespace\": \"api/platform/v1beta1\",\n        \"kind\": \"f5.ext.platform.lifecycle\",\n        \"uid\": \"d376a412-cdb1-11e8-bbe6-060757e5a46a\",\n        \"create_time\": \"2018-10-12T00:00:27Z\",\n        \"update_time\": null\n    },\n    \"spec\": {\n        \"intent\": \"PROVISION\"\n    },\n    \"status\": {\n        \"phase\": \"PROVISIONED\",\n        \"health\": {\n            \"index\": 0,\n            \"reason\": \"Platform is unhealthy\",\n            \"elements\": [\n                {\n                    \"element_name\": \"analytics\",\n                    \"index\": 0,\n                    \"reason\": \"Platform health is unavailable when Analytics services are not responsive\"\n                }\n            ]\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "4) GET vCenter service account settings",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/vcenter/settings/vcenter_info",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"vcenter",
								"settings",
								"vcenter_info"
							]
						}
					},
					"response": [
						{
							"name": "Lifecycle",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/v1beta1/lifecycle",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"v1beta1",
										"lifecycle"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "grpc-metadata-content-type",
									"value": "application/grpc"
								},
								{
									"key": "date",
									"value": "Fri, 12 Oct 2018 01:00:05 GMT"
								},
								{
									"key": "content-length",
									"value": "458"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "103"
								},
								{
									"key": "server",
									"value": "envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"metadata\": {\n        \"name\": \"lifecycle\",\n        \"namespace\": \"api/platform/v1beta1\",\n        \"kind\": \"f5.ext.platform.lifecycle\",\n        \"uid\": \"d376a412-cdb1-11e8-bbe6-060757e5a46a\",\n        \"create_time\": \"2018-10-12T00:00:27Z\",\n        \"update_time\": null\n    },\n    \"spec\": {\n        \"intent\": \"PROVISION\"\n    },\n    \"status\": {\n        \"phase\": \"PROVISIONED\",\n        \"health\": {\n            \"index\": 0,\n            \"reason\": \"Platform is unhealthy\",\n            \"elements\": [\n                {\n                    \"element_name\": \"analytics\",\n                    \"index\": 0,\n                    \"reason\": \"Platform health is unavailable when Analytics services are not responsive\"\n                }\n            ]\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "5) update vCenter service account",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"host\": \"10.10.10.10\",\n        \"username\": \"username@domain.local\",\n        \"password\": \"password\"\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/vcenter/settings/vcenter_info",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"vcenter",
								"settings",
								"vcenter_info"
							]
						}
					},
					"response": [
						{
							"name": "Lifecycle",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/v1beta1/lifecycle",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"v1beta1",
										"lifecycle"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "grpc-metadata-content-type",
									"value": "application/grpc"
								},
								{
									"key": "date",
									"value": "Fri, 12 Oct 2018 01:00:05 GMT"
								},
								{
									"key": "content-length",
									"value": "458"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "103"
								},
								{
									"key": "server",
									"value": "envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"metadata\": {\n        \"name\": \"lifecycle\",\n        \"namespace\": \"api/platform/v1beta1\",\n        \"kind\": \"f5.ext.platform.lifecycle\",\n        \"uid\": \"d376a412-cdb1-11e8-bbe6-060757e5a46a\",\n        \"create_time\": \"2018-10-12T00:00:27Z\",\n        \"update_time\": null\n    },\n    \"spec\": {\n        \"intent\": \"PROVISION\"\n    },\n    \"status\": {\n        \"phase\": \"PROVISIONED\",\n        \"health\": {\n            \"index\": 0,\n            \"reason\": \"Platform is unhealthy\",\n            \"elements\": [\n                {\n                    \"element_name\": \"analytics\",\n                    \"index\": 0,\n                    \"reason\": \"Platform health is unavailable when Analytics services are not responsive\"\n                }\n            ]\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "6) Logout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
								"exec": [
									"pm.test(\"Logout\", function () {",
									"    ",
									"    pm.globals.unset(\"TOKEN\");",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"state\": {\n        \"token\": \"{{TOKEN}}\"\n    }\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/logout",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c98aa196-6eda-421e-8a56-fdfb51ee0b49",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1c1bd050-2fbc-4512-bc5e-d9e6790a88c6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "9) User management",
			"item": [
				{
					"name": "Create New User with specified password",
					"item": [
						{
							"name": "1) Login as 'Admin'",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Authenticate\", function () {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											" \r",
											"    pm.globals.set(\"TOKEN\", jsonData.state.token);\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"admin\",\n\t\t\"password\": \"{{PASSWORD}}\"\n\t}\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "2) List users",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Authenticated\",function(){",
											"    switch(responseCode.code) {",
											"        case 401:",
											"            throw new Error(\"Request did not contain proper authentication token\");",
											"        default:",
											"            break;",
											"    }",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/users",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "3) Create second user 'Olivia'",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Authenticated\",function(){\r",
											"    switch(responseCode.code) {\r",
											"        case 401:\r",
											"            throw new Error(\"Request did not contain proper authentication token\");\r",
											"        default:\r",
											"            break;\r",
											"    }\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"setseconduser\", function () {\r",
											"    var jsonData = JSON.parse(request.data);\r",
											" \r",
											"    pm.globals.set(\"SECOND_USER_NAME\", jsonData.resource_id);\r",
											"    pm.globals.set(\"SECOND_USER_PASSWORD\", jsonData.state.password);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resource_id\": \"olivia\",\n    \"state\": {\n        \"display_name\": \"Olivia Bee\",\n        \"password\": \"Olivias$3curePassword\"\n    }\n}\n"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/users",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "4) Logout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Logout\", function () {",
											"    ",
											"    pm.globals.unset(\"TOKEN\");",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"state\": {\n        \"token\": \"{{TOKEN}}\"\n    }\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/logout",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "5) Login as 'Olivia'",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Authenticate\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"    \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											" \r",
											"    pm.globals.set(\"TOKEN\", jsonData.state.token);\r",
											"    pm.response.to.have.status(200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"olivia\",\n\t\t\"password\": \"Olivias$3curePassword\"\n\t}\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "6) Logout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Logout\", function () {",
											"    ",
											"    pm.globals.unset(\"TOKEN\");",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"state\": {\n        \"token\": \"{{TOKEN}}\"\n    }\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/logout",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Disable User",
					"item": [
						{
							"name": "1) Login as 'Admin'",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Authenticate\", function () {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											" \r",
											"    pm.globals.set(\"TOKEN\", jsonData.state.token);\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"admin\",\n\t\t\"password\": \"{{PASSWORD}}\"\n\t}\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "2) Disable \"Olivia\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2d40e9c-1b52-4419-8152-64103f37ddfd",
										"exec": [
											"pm.test(\"Authenticated\",function(){",
											"    switch(responseCode.code) {",
											"        case 401:",
											"            throw new Error(\"Request did not contain proper authentication token\");",
											"        default:",
											"            break;",
											"    }",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"state\": {\n\t\t\"userstatus_payload\": {\n\t\t\t\"user_status\": \"DISABLED\"\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/users/olivia/lifecycle",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"users",
										"olivia",
										"lifecycle"
									]
								}
							},
							"response": []
						},
						{
							"name": "3) Logout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Logout\", function () {",
											"    ",
											"    pm.globals.unset(\"TOKEN\");",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"state\": {\n        \"token\": \"{{TOKEN}}\"\n    }\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/logout",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "4) Login as 'Olvia' after disabling account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Authenticate\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"olivia\",\n\t\t\"password\": \"Olivias$3curePassword\"\n\t}\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "5) Login as 'Admin'",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Authenticate\", function () {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											" \r",
											"    pm.globals.set(\"TOKEN\", jsonData.state.token);\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"admin\",\n\t\t\"password\": \"{{PASSWORD}}\"\n\t}\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "6) List user information for Olivia",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Authenticated\",function(){",
											"    switch(responseCode.code) {",
											"        case 401:",
											"            throw new Error(\"Request did not contain proper authentication token\");",
											"        default:",
											"            break;",
											"    }",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/users/olivia",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"users",
										"olivia"
									]
								}
							},
							"response": []
						},
						{
							"name": "7) Logout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Logout\", function () {",
											"    ",
											"    pm.globals.unset(\"TOKEN\");",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"state\": {\n        \"token\": \"{{TOKEN}}\"\n    }\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/logout",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Create new user with One Time Password",
					"item": [
						{
							"name": "1) Login as 'Admin'",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Authenticate\", function () {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											" \r",
											"    pm.globals.set(\"TOKEN\", jsonData.state.token);\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"admin\",\n\t\t\"password\": \"{{PASSWORD}}\"\n\t}\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "2) Create third user 'David'",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Authenticated\",function(){\r",
											"    switch(responseCode.code) {\r",
											"        case 401:\r",
											"            throw new Error(\"Request did not contain proper authentication token\");\r",
											"        default:\r",
											"            break;\r",
											"    }\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"Create Third User\", function () {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											" \r",
											"    pm.globals.set(\"THIRD_USER_NAME\", jsonData.resource_id);\r",
											"    pm.globals.set(\"THIRD_USER_PASSWORD\", jsonData.state.one_time_password);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resource_id\": \"david\",\n    \"state\": {\n        \"display_name\": \"David Bowie\",\n        \"password\": \"\"\n    }\n}\n"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/users",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "3) Logout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Logout\", function () {",
											"    ",
											"    pm.globals.unset(\"TOKEN\");",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"state\": {\n        \"token\": \"{{TOKEN}}\"\n    }\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/logout",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "4) Login as 'David'",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Authenticate\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"david\",\n\t\t\"password\": \"{{THIRD_USER_PASSWORD}}\"\n\t}\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "5) Change password for 'David'",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Password Change\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"state\": {\n        \"password_payload\": {\n            \"current_password\": \"{{THIRD_USER_PASSWORD}}\",\n            \"new_password\": \"BatteryStaple23!\"\n        }\n    }\n}\n"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/users/david/lifecycle",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"users",
										"david",
										"lifecycle"
									]
								}
							},
							"response": []
						},
						{
							"name": "6) Login as 'David' after changing password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Authenticate\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"    \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											" \r",
											"    pm.globals.set(\"TOKEN\", jsonData.state.token);\r",
											"    pm.response.to.have.status(200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"david\",\n\t\t\"password\": \"BatteryStaple23!\"\n\t}\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "7) Logout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Logout\", function () {",
											"    ",
											"    pm.globals.unset(\"TOKEN\");",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"state\": {\n        \"token\": \"{{TOKEN}}\"\n    }\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/logout",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Create user with mTLS Auth",
					"item": [
						{
							"name": "1) Login as 'Admin'",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Authenticate\", function () {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											" \r",
											"    pm.globals.set(\"TOKEN\", jsonData.state.token);\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"admin\",\n\t\t\"password\": \"{{PASSWORD}}\"\n\t}\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "2) Create fourth user 'Chris'",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resource_id\": \"chris\",\n    \"state\": {\n        \"display_name\": \"Chris Paul\"\n    }\n}\n"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/users",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "3) Generate mTLS certificate for 'Chris'",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resource_id\": \"chris\",\n    \"state\": {\n        \"display_name\": \"Chris Paul\"\n    }\n}\n"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/users/chris/certs",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"users",
										"chris",
										"certs"
									]
								}
							},
							"response": []
						},
						{
							"name": "4) List users",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Authenticated\",function(){",
											"    switch(responseCode.code) {",
											"        case 401:",
											"            throw new Error(\"Request did not contain proper authentication token\");",
											"        default:",
											"            break;",
											"    }",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/users",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "5) Logout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Logout\", function () {",
											"    ",
											"    pm.globals.unset(\"TOKEN\");",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"state\": {\n        \"token\": \"{{TOKEN}}\"\n    }\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/logout",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete user",
					"item": [
						{
							"name": "1) Login as 'Admin'",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Authenticate\", function () {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											" \r",
											"    pm.globals.set(\"TOKEN\", jsonData.state.token);\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"admin\",\n\t\t\"password\": \"{{PASSWORD}}\"\n\t}\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "2) Delete fourth for 'David'",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resource_id\": \"chris\",\n    \"state\": {\n        \"display_name\": \"Chris Paul\"\n    }\n}\n"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/users/david",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"users",
										"david"
									]
								}
							},
							"response": []
						},
						{
							"name": "3) List users",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Authenticated\",function(){",
											"    switch(responseCode.code) {",
											"        case 401:",
											"            throw new Error(\"Request did not contain proper authentication token\");",
											"        default:",
											"            break;",
											"    }",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/users",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "4) Logout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Logout\", function () {",
											"    ",
											"    pm.globals.unset(\"TOKEN\");",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"state\": {\n        \"token\": \"{{TOKEN}}\"\n    }\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/logout",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "5) Login as 'David' after deleting him",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Authenticate\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"david\",\n\t\t\"password\": \"BatteryStaple23!\"\n\t}\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get User Profile",
					"item": [
						{
							"name": "1) Login as 'Admin'",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Authenticate\", function () {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											" \r",
											"    pm.globals.set(\"TOKEN\", jsonData.state.token);\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"admin\",\n\t\t\"password\": \"{{PASSWORD}}\"\n\t}\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "2) Get User Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Authenticated\",function(){",
											"    switch(responseCode.code) {",
											"        case 401:",
											"            throw new Error(\"Request did not contain proper authentication token\");",
											"        default:",
											"            break;",
											"    }",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/currentuserprofile",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"currentuserprofile"
									]
								}
							},
							"response": []
						},
						{
							"name": "3) Logout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
										"exec": [
											"pm.test(\"Logout\", function () {",
											"    ",
											"    pm.globals.unset(\"TOKEN\");",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"state\": {\n        \"token\": \"{{TOKEN}}\"\n    }\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/logout",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "10) Managing Support Package",
			"item": [
				{
					"name": "1) Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
								"exec": [
									"pm.test(\"Authenticate\", function () {\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									" \r",
									"    pm.globals.set(\"TOKEN\", jsonData.state.token);\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"admin\",\n\t\t\"password\": \"{{PASSWORD}}\"\n\t}\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2) Create Support Package",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d1e7df7-bf05-4f7d-b11d-b889ad6c65e6",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});",
									"",
									"pm.test(\"Set PACKAGE_ID into global variable\", function () {",
									"    var jsonData = JSON.parse(responseBody);",
									"    pm.globals.set(\"PACKAGE_ID\", jsonData.resource_id);",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "45aefce3-9cdc-410d-ad33-60e94216464d",
								"exec": [
									"pm.variables.set(\"NOW\",new Date().toISOString())",
									"pm.variables.get(\"NOW\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"start_time\": \"{{NOW}}\",\r\n  \"duration\": \"86400s\",\r\n  \"configuration_selector\": {\r\n    \"exclude\": false\r\n  },\r\n  \"log_selector\": {\r\n    \"exclude\": false\r\n  },\r\n  \"statistics_selector\": {\r\n    \"exclude\": false\r\n  },\r\n  \"event_selector\": {\r\n    \"exclude\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/support/packages",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"support",
								"packages"
							]
						}
					},
					"response": [
						{
							"name": "Login - \"admin\" - Before Initialization",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"admin\",\n\t\t\"password\": \"{{PASSWORD}}\"\t\t\n\t}\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"login"
									]
								}
							},
							"status": "Precondition Failed",
							"code": 412,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "date",
									"value": "Fri, 12 Oct 2018 16:22:11 GMT"
								},
								{
									"key": "content-length",
									"value": "338"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "0"
								},
								{
									"key": "server",
									"value": "envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"code\": 412,\n        \"message\": \"A request to login was rejected because admin account password has not been initialized\",\n        \"status\": \"Precondition Failed\",\n        \"details\": [\n            {\n                \"@type\": \"type.googleapis.com/f5.blue.error.v1alpha1.Details\",\n                \"error_id\": \"api_user_admin_uninitialized\",\n                \"session_id\": \"\",\n                \"request_id\": \"11dc8979-56b4-485f-8323-a6bf0ab9ed34\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "3) Check a progress of support package generation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c98fc1c6-09d4-4529-9dbd-b667024e15a0",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});",
									"",
									"",
									"pm.test(\"Set DOWNLOAD_REF into global variable\", function () {",
									"    var jsonData = JSON.parse(responseBody);",
									"    pm.globals.set(\"DOWNLOAD_REF\", jsonData.status.download_ref.name);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/support/packages/{{PACKAGE_ID}}",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"support",
								"packages",
								"{{PACKAGE_ID}}"
							]
						}
					},
					"response": [
						{
							"name": "Login - \"admin\" - Before Initialization",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"admin\",\n\t\t\"password\": \"{{PASSWORD}}\"\t\t\n\t}\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"login"
									]
								}
							},
							"status": "Precondition Failed",
							"code": 412,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "date",
									"value": "Fri, 12 Oct 2018 16:22:11 GMT"
								},
								{
									"key": "content-length",
									"value": "338"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "0"
								},
								{
									"key": "server",
									"value": "envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"code\": 412,\n        \"message\": \"A request to login was rejected because admin account password has not been initialized\",\n        \"status\": \"Precondition Failed\",\n        \"details\": [\n            {\n                \"@type\": \"type.googleapis.com/f5.blue.error.v1alpha1.Details\",\n                \"error_id\": \"api_user_admin_uninitialized\",\n                \"session_id\": \"\",\n                \"request_id\": \"11dc8979-56b4-485f-8323-a6bf0ab9ed34\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "4) List all support packages",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d1e7df7-bf05-4f7d-b11d-b889ad6c65e6",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});",
									"",
									"pm.test(\"Set PACKAGE_ID into global variable\", function () {",
									"    var jsonData = JSON.parse(responseBody);",
									"    pm.globals.set(\"PACKAGE_ID\", jsonData.resource_id);",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "45aefce3-9cdc-410d-ad33-60e94216464d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/support/packages",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"support",
								"packages"
							]
						}
					},
					"response": [
						{
							"name": "Login - \"admin\" - Before Initialization",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"admin\",\n\t\t\"password\": \"{{PASSWORD}}\"\t\t\n\t}\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"login"
									]
								}
							},
							"status": "Precondition Failed",
							"code": 412,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "date",
									"value": "Fri, 12 Oct 2018 16:22:11 GMT"
								},
								{
									"key": "content-length",
									"value": "338"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "0"
								},
								{
									"key": "server",
									"value": "envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"code\": 412,\n        \"message\": \"A request to login was rejected because admin account password has not been initialized\",\n        \"status\": \"Precondition Failed\",\n        \"details\": [\n            {\n                \"@type\": \"type.googleapis.com/f5.blue.error.v1alpha1.Details\",\n                \"error_id\": \"api_user_admin_uninitialized\",\n                \"session_id\": \"\",\n                \"request_id\": \"11dc8979-56b4-485f-8323-a6bf0ab9ed34\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "5) Delete Support Package",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c98fc1c6-09d4-4529-9dbd-b667024e15a0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/support/packages/{{PACKAGE_ID}}",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"support",
								"packages",
								"{{PACKAGE_ID}}"
							]
						}
					},
					"response": [
						{
							"name": "Login - \"admin\" - Before Initialization",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"admin\",\n\t\t\"password\": \"{{PASSWORD}}\"\t\t\n\t}\n}"
								},
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"{{PLATFORM_VERSION}}",
										"login"
									]
								}
							},
							"status": "Precondition Failed",
							"code": 412,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "date",
									"value": "Fri, 12 Oct 2018 16:22:11 GMT"
								},
								{
									"key": "content-length",
									"value": "338"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "0"
								},
								{
									"key": "server",
									"value": "envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"code\": 412,\n        \"message\": \"A request to login was rejected because admin account password has not been initialized\",\n        \"status\": \"Precondition Failed\",\n        \"details\": [\n            {\n                \"@type\": \"type.googleapis.com/f5.blue.error.v1alpha1.Details\",\n                \"error_id\": \"api_user_admin_uninitialized\",\n                \"session_id\": \"\",\n                \"request_id\": \"11dc8979-56b4-485f-8323-a6bf0ab9ed34\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "6) Logout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
								"exec": [
									"pm.test(\"Logout\", function () {",
									"    ",
									"    pm.globals.unset(\"TOKEN\");",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"state\": {\n        \"token\": \"{{TOKEN}}\"\n    }\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/logout",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "11) Removing defined applications",
			"item": [
				{
					"name": "1) Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
								"exec": [
									"pm.test(\"Authenticate\", function () {\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									" \r",
									"    pm.globals.set(\"TOKEN\", jsonData.state.token);\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"admin\",\n\t\t\"password\": \"{{PASSWORD}}\"\n\t}\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2) remove example-application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ed7488ae-5417-4e06-9aab-5aab35dfb9e3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "260e8757-b10e-4675-a600-a44e5cc134a0",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps/example-application",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps",
								"example-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "3) GET example-application deployment status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3f65e29-415f-4266-a053-f4ae347b9c29",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps/example-application",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps",
								"example-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "4) remove monitored-application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "74e22268-a04e-4d52-8d33-cb33e5e92119",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9d659eec-2b09-4215-93b1-2df3b3516222",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps/monitored-application",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps",
								"monitored-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "5) GET monitored-application deployment status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96a2e11c-e9c5-4f31-9e67-0751c307119b",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps/monitored-application",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps",
								"monitored-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "6) remove secure-application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4db2c904-3efb-4950-83e9-b911c2e5e22f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ca32331b-6c90-4ca4-b23c-495594f92a1a",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps/secure-application",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps",
								"secure-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "7) GET secure-application deployment status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b77e008a-5b43-4024-b7cc-0a2de376929b",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Authenticated\",function(){\r",
									"    switch(responseCode.code) {\r",
									"        case 401:\r",
									"            throw new Error(\"Request did not contain proper authentication token\");\r",
									"        default:\r",
									"            break;\r",
									"    }\r",
									"    \r",
									"});\r",
									"pm.test(\"set BlockAppServiceDNS\", function () {\r",
									"    pm.globals.set(\"BlockAppServiceDNS\", null);\r",
									"    if (jsonData.status !== null && jsonData.status.paths[\"as-block\"]) {\r",
									"        let ip = jsonData.status.paths[\"as-block\"].properties.ip;\r",
									"        if (ValidateIPaddress(ip)) {\r",
									"            pm.globals.set(\"BlockAppServiceDNS\", ip);    \r",
									"        }\r",
									"        else {\r",
									"            throw new Error(\"Invalid IP or FQDN returned for path as-block: \" + ip);\r",
									"        }\r",
									"    } else { throw new Error(\"as-block Path was not properly defined\");}\r",
									"});\r",
									"\r",
									"pm.test(\"set MonitorAppserviceDNS\", function () {\r",
									"    pm.globals.set(\"MonitorAppserviceDNS\", null);  \r",
									"    if (jsonData.status !== null && jsonData.status.paths[\"as-monitor\"]) {\r",
									"        let ip = jsonData.status.paths[\"as-monitor\"].properties.ip;\r",
									"        if (ValidateIPaddress(ip)) {\r",
									"            pm.globals.set(\"MonitorAppserviceDNS\", ip);    \r",
									"        }\r",
									"        else {\r",
									"            throw new Error(\"Invalid IP or FQDN returned for path as-monitor: \" + ip);\r",
									"        }\r",
									"    } else { throw new Error(\"as-monitor Path was not properly defined\");}\r",
									"});\r",
									"\r",
									"\r",
									"function ValidateIPaddress(ipaddress) \r",
									"{\r",
									"    if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ipaddress))\r",
									"    {\r",
									"        return (true);\r",
									"    }\r",
									"    return (false);\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8f8de1a4-f06d-454a-a7a3-87316cc9b7ed",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps/secure-application",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps",
								"secure-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "8) DELETE ha-application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4db2c904-3efb-4950-83e9-b911c2e5e22f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ca32331b-6c90-4ca4-b23c-495594f92a1a",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps/ha-application",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps",
								"ha-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "9) GET ha-application deployment status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4db2c904-3efb-4950-83e9-b911c2e5e22f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ca32331b-6c90-4ca4-b23c-495594f92a1a",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/apps/ha-application",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"apps",
								"ha-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "10) Remvoe certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bcfa36a-d6ee-4fd4-9423-a4db585f353d",
								"exec": [
									"pm.test(\"Authenticated\",function(){",
									"    switch(responseCode.code) {",
									"        case 401:",
									"            throw new Error(\"Request did not contain proper authentication token\");",
									"        default:",
									"            break;",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "29aa0a9f-d292-44b8-89b6-1b661b492505",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-f5-authn-token",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"resource_id\":\"acmefinancial.net\",\"spec\":{}}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/traffic/{{TRAFFIC_VERSION}}/certs/acmefinancial.net",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"traffic",
								"{{TRAFFIC_VERSION}}",
								"certs",
								"acmefinancial.net"
							]
						}
					},
					"response": []
				},
				{
					"name": "11) Logout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
								"exec": [
									"pm.test(\"Logout\", function () {",
									"    ",
									"    pm.globals.unset(\"TOKEN\");",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"state\": {\n        \"token\": \"{{TOKEN}}\"\n    }\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/logout",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "12) Destroy your Blue platform",
			"item": [
				{
					"name": "1)  Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd44f12-46da-4155-b90a-f388cb5fae0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d30e9d16-0e8e-434f-833c-4814d7396bfc",
								"exec": [
									"pm.test(\"Authenticate\", function () {\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									" \r",
									"    pm.globals.set(\"TOKEN\", jsonData.state.token);\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"state\": {\n\t\t\"user_id\": \"admin\",\n\t\t\"password\": \"{{PASSWORD}}\"\n\t}\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/login",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2) Deprovision Blue (there is no going back)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"spec\":{ \r\n  \t\"intent\": \"DEPROVISION\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/lifecycle",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"lifecycle"
							]
						}
					},
					"response": [
						{
							"name": "Lifecycle",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/v1beta1/lifecycle",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"v1beta1",
										"lifecycle"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "grpc-metadata-content-type",
									"value": "application/grpc"
								},
								{
									"key": "date",
									"value": "Fri, 12 Oct 2018 01:00:05 GMT"
								},
								{
									"key": "content-length",
									"value": "458"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "103"
								},
								{
									"key": "server",
									"value": "envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"metadata\": {\n        \"name\": \"lifecycle\",\n        \"namespace\": \"api/platform/v1beta1\",\n        \"kind\": \"f5.ext.platform.lifecycle\",\n        \"uid\": \"d376a412-cdb1-11e8-bbe6-060757e5a46a\",\n        \"create_time\": \"2018-10-12T00:00:27Z\",\n        \"update_time\": null\n    },\n    \"spec\": {\n        \"intent\": \"PROVISION\"\n    },\n    \"status\": {\n        \"phase\": \"PROVISIONED\",\n        \"health\": {\n            \"index\": 0,\n            \"reason\": \"Platform is unhealthy\",\n            \"elements\": [\n                {\n                    \"element_name\": \"analytics\",\n                    \"index\": 0,\n                    \"reason\": \"Platform health is unavailable when Analytics services are not responsive\"\n                }\n            ]\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "3) GET Platform information",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-F5-AuthN-Token",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{HOSTNAME}}/api/platform/{{PLATFORM_VERSION}}/lifecycle",
							"protocol": "https",
							"host": [
								"{{HOSTNAME}}"
							],
							"path": [
								"api",
								"platform",
								"{{PLATFORM_VERSION}}",
								"lifecycle"
							]
						}
					},
					"response": [
						{
							"name": "Lifecycle",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-F5-AuthN-Token",
										"value": "{{TOKEN}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{HOSTNAME}}/api/platform/v1beta1/lifecycle",
									"protocol": "https",
									"host": [
										"{{HOSTNAME}}"
									],
									"path": [
										"api",
										"platform",
										"v1beta1",
										"lifecycle"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "grpc-metadata-content-type",
									"value": "application/grpc"
								},
								{
									"key": "date",
									"value": "Fri, 12 Oct 2018 01:00:05 GMT"
								},
								{
									"key": "content-length",
									"value": "458"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "103"
								},
								{
									"key": "server",
									"value": "envoy"
								}
							],
							"cookie": [],
							"body": "{\n    \"metadata\": {\n        \"name\": \"lifecycle\",\n        \"namespace\": \"api/platform/v1beta1\",\n        \"kind\": \"f5.ext.platform.lifecycle\",\n        \"uid\": \"d376a412-cdb1-11e8-bbe6-060757e5a46a\",\n        \"create_time\": \"2018-10-12T00:00:27Z\",\n        \"update_time\": null\n    },\n    \"spec\": {\n        \"intent\": \"PROVISION\"\n    },\n    \"status\": {\n        \"phase\": \"PROVISIONED\",\n        \"health\": {\n            \"index\": 0,\n            \"reason\": \"Platform is unhealthy\",\n            \"elements\": [\n                {\n                    \"element_name\": \"analytics\",\n                    \"index\": 0,\n                    \"reason\": \"Platform health is unavailable when Analytics services are not responsive\"\n                }\n            ]\n        }\n    }\n}"
						}
					]
				}
			],
			"description": "Only do this when you are finished with Blue.\nThis is a destructive command that will destroy all but the first Blue Control node.\n\nAfter running this command: \n1) wait for the platform to be in a deprovisioned state\n2) delete the template used to first deploy Blue"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "6335013b-4def-4059-9aa4-b033faca6111",
				"type": "text/javascript",
				"exec": [
					"if (/[<>/\\\\${}]/g.test(pm.variables.get(\"HOSTNAME\"))) {",
					"    throw new Error(\"HOSTNAME: \" +  pm.variables.get(\"HOSTNAME\"));",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b3f77833-394e-457e-af75-24f6366db031",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "924ca54b-98c3-400e-bcba-607d17481426",
			"key": "HOSTNAME",
			"value": "<Blue Controller IP or FQDN>",
			"type": "string"
		},
		{
			"id": "03920da4-4506-4d8f-8711-f51ee6c0f1f3",
			"key": "USERNAME",
			"value": "admin",
			"type": "string"
		},
		{
			"id": "b4b9cdd2-12a2-4575-ae60-43c5bf39fafc",
			"key": "PASSWORD",
			"value": "Admin123!@#",
			"type": "string"
		},
		{
			"id": "a485af61-c5b5-492e-8c1c-3bd58a1926fc",
			"key": "INITIAL_PASSWORD",
			"value": "<AWS instanceid or vCenter controller VM IP>",
			"type": "string"
		},
		{
			"id": "9882244a-95f5-42fa-987d-b78a6582e936",
			"key": "WORKLOAD_01",
			"value": "<application workload 1 IP>",
			"type": "string"
		},
		{
			"id": "c11254c0-5341-49f1-96e5-13f06ffc0cd1",
			"key": "WORKLOAD_02",
			"value": "<application workload 2 IP>",
			"type": "string"
		},
		{
			"id": "ae7c901b-b2c4-4902-a6df-4255b50a59cf",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"id": "e9f1b23c-ce73-49fe-a517-d72d51913da0",
			"key": "CAT_ID",
			"value": "< Platform License>",
			"type": "string"
		},
		{
			"id": "a6b33bfb-8628-479d-bf63-11777236f6dc",
			"key": "PLATFORM_VERSION",
			"value": "v1beta2",
			"type": "string"
		},
		{
			"id": "5037d139-c079-4345-8040-df4abbe7fb8c",
			"key": "TRAFFIC_VERSION",
			"value": "v1beta2",
			"type": "string"
		},
		{
			"id": "2a20ac75-0612-4add-9227-c9f8ee4c247b",
			"key": "ANALYTICS_VERSION",
			"value": "v1beta2",
			"type": "string"
		}
	]
}